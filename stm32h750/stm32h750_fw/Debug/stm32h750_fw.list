
stm32h750_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000074  20000000  08002880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000024  20000074  080028f4  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000098  080028f4  00020098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c344  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018e0  00000000  00000000  0002c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000600  00000000  00000000  0002dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000558  00000000  00000000  0002e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003573  00000000  00000000  0002e820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002dd2  00000000  00000000  00031d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034b65  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001604  00000000  00000000  00034be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  000361e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002760 	.word	0x08002760

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	08002760 	.word	0x08002760

080002d8 <selfrel_offset31>:
 80002d8:	6803      	ldr	r3, [r0, #0]
 80002da:	005a      	lsls	r2, r3, #1
 80002dc:	bf4c      	ite	mi
 80002de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80002e2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80002e6:	4418      	add	r0, r3
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <search_EIT_table>:
 80002ec:	b361      	cbz	r1, 8000348 <search_EIT_table+0x5c>
 80002ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002f2:	f101 3aff 	add.w	sl, r1, #4294967295
 80002f6:	4690      	mov	r8, r2
 80002f8:	4606      	mov	r6, r0
 80002fa:	46d1      	mov	r9, sl
 80002fc:	2700      	movs	r7, #0
 80002fe:	eb07 0409 	add.w	r4, r7, r9
 8000302:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000306:	1064      	asrs	r4, r4, #1
 8000308:	00e5      	lsls	r5, r4, #3
 800030a:	1971      	adds	r1, r6, r5
 800030c:	4608      	mov	r0, r1
 800030e:	f7ff ffe3 	bl	80002d8 <selfrel_offset31>
 8000312:	45a2      	cmp	sl, r4
 8000314:	4683      	mov	fp, r0
 8000316:	f105 0008 	add.w	r0, r5, #8
 800031a:	4430      	add	r0, r6
 800031c:	d009      	beq.n	8000332 <search_EIT_table+0x46>
 800031e:	f7ff ffdb 	bl	80002d8 <selfrel_offset31>
 8000322:	45c3      	cmp	fp, r8
 8000324:	f100 30ff 	add.w	r0, r0, #4294967295
 8000328:	d805      	bhi.n	8000336 <search_EIT_table+0x4a>
 800032a:	4540      	cmp	r0, r8
 800032c:	d209      	bcs.n	8000342 <search_EIT_table+0x56>
 800032e:	1c67      	adds	r7, r4, #1
 8000330:	e7e5      	b.n	80002fe <search_EIT_table+0x12>
 8000332:	45c3      	cmp	fp, r8
 8000334:	d905      	bls.n	8000342 <search_EIT_table+0x56>
 8000336:	42a7      	cmp	r7, r4
 8000338:	d002      	beq.n	8000340 <search_EIT_table+0x54>
 800033a:	f104 39ff 	add.w	r9, r4, #4294967295
 800033e:	e7de      	b.n	80002fe <search_EIT_table+0x12>
 8000340:	2100      	movs	r1, #0
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	4608      	mov	r0, r1
 800034a:	4770      	bx	lr

0800034c <__gnu_unwind_get_pr_addr>:
 800034c:	2801      	cmp	r0, #1
 800034e:	d007      	beq.n	8000360 <__gnu_unwind_get_pr_addr+0x14>
 8000350:	2802      	cmp	r0, #2
 8000352:	d007      	beq.n	8000364 <__gnu_unwind_get_pr_addr+0x18>
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <__gnu_unwind_get_pr_addr+0x1c>)
 8000356:	2800      	cmp	r0, #0
 8000358:	bf0c      	ite	eq
 800035a:	4618      	moveq	r0, r3
 800035c:	2000      	movne	r0, #0
 800035e:	4770      	bx	lr
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <__gnu_unwind_get_pr_addr+0x20>)
 8000362:	4770      	bx	lr
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <__gnu_unwind_get_pr_addr+0x24>)
 8000366:	4770      	bx	lr
 8000368:	08000a51 	.word	0x08000a51
 800036c:	08000a55 	.word	0x08000a55
 8000370:	08000a59 	.word	0x08000a59

08000374 <get_eit_entry>:
 8000374:	b530      	push	{r4, r5, lr}
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <get_eit_entry+0x94>)
 8000378:	b083      	sub	sp, #12
 800037a:	4604      	mov	r4, r0
 800037c:	1e8d      	subs	r5, r1, #2
 800037e:	b37b      	cbz	r3, 80003e0 <get_eit_entry+0x6c>
 8000380:	a901      	add	r1, sp, #4
 8000382:	4628      	mov	r0, r5
 8000384:	f3af 8000 	nop.w
 8000388:	b320      	cbz	r0, 80003d4 <get_eit_entry+0x60>
 800038a:	9901      	ldr	r1, [sp, #4]
 800038c:	462a      	mov	r2, r5
 800038e:	f7ff ffad 	bl	80002ec <search_EIT_table>
 8000392:	4601      	mov	r1, r0
 8000394:	b1f0      	cbz	r0, 80003d4 <get_eit_entry+0x60>
 8000396:	f7ff ff9f 	bl	80002d8 <selfrel_offset31>
 800039a:	684b      	ldr	r3, [r1, #4]
 800039c:	64a0      	str	r0, [r4, #72]	; 0x48
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d012      	beq.n	80003c8 <get_eit_entry+0x54>
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f101 0004 	add.w	r0, r1, #4
 80003a8:	db20      	blt.n	80003ec <get_eit_entry+0x78>
 80003aa:	f7ff ff95 	bl	80002d8 <selfrel_offset31>
 80003ae:	2300      	movs	r3, #0
 80003b0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80003b2:	6523      	str	r3, [r4, #80]	; 0x50
 80003b4:	6803      	ldr	r3, [r0, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	db1c      	blt.n	80003f4 <get_eit_entry+0x80>
 80003ba:	f7ff ff8d 	bl	80002d8 <selfrel_offset31>
 80003be:	2300      	movs	r3, #0
 80003c0:	6120      	str	r0, [r4, #16]
 80003c2:	4618      	mov	r0, r3
 80003c4:	b003      	add	sp, #12
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	2300      	movs	r3, #0
 80003ca:	6123      	str	r3, [r4, #16]
 80003cc:	2305      	movs	r3, #5
 80003ce:	4618      	mov	r0, r3
 80003d0:	b003      	add	sp, #12
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	2300      	movs	r3, #0
 80003d6:	6123      	str	r3, [r4, #16]
 80003d8:	2309      	movs	r3, #9
 80003da:	4618      	mov	r0, r3
 80003dc:	b003      	add	sp, #12
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	490a      	ldr	r1, [pc, #40]	; (800040c <get_eit_entry+0x98>)
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <get_eit_entry+0x9c>)
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	10c9      	asrs	r1, r1, #3
 80003e8:	9101      	str	r1, [sp, #4]
 80003ea:	e7cf      	b.n	800038c <get_eit_entry+0x18>
 80003ec:	2301      	movs	r3, #1
 80003ee:	64e0      	str	r0, [r4, #76]	; 0x4c
 80003f0:	6523      	str	r3, [r4, #80]	; 0x50
 80003f2:	e7df      	b.n	80003b4 <get_eit_entry+0x40>
 80003f4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80003f8:	f7ff ffa8 	bl	800034c <__gnu_unwind_get_pr_addr>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	6120      	str	r0, [r4, #16]
 8000400:	bf14      	ite	ne
 8000402:	2300      	movne	r3, #0
 8000404:	2309      	moveq	r3, #9
 8000406:	e7dc      	b.n	80003c2 <get_eit_entry+0x4e>
 8000408:	00000000 	.word	0x00000000
 800040c:	08002878 	.word	0x08002878
 8000410:	080027a0 	.word	0x080027a0

08000414 <restore_non_core_regs>:
 8000414:	6803      	ldr	r3, [r0, #0]
 8000416:	07da      	lsls	r2, r3, #31
 8000418:	b510      	push	{r4, lr}
 800041a:	4604      	mov	r4, r0
 800041c:	d406      	bmi.n	800042c <restore_non_core_regs+0x18>
 800041e:	079b      	lsls	r3, r3, #30
 8000420:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000424:	d509      	bpl.n	800043a <restore_non_core_regs+0x26>
 8000426:	f000 fc51 	bl	8000ccc <__gnu_Unwind_Restore_VFP_D>
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	0759      	lsls	r1, r3, #29
 800042e:	d509      	bpl.n	8000444 <restore_non_core_regs+0x30>
 8000430:	071a      	lsls	r2, r3, #28
 8000432:	d50e      	bpl.n	8000452 <restore_non_core_regs+0x3e>
 8000434:	06db      	lsls	r3, r3, #27
 8000436:	d513      	bpl.n	8000460 <restore_non_core_regs+0x4c>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	f000 fc3f 	bl	8000cbc <__gnu_Unwind_Restore_VFP>
 800043e:	6823      	ldr	r3, [r4, #0]
 8000440:	0759      	lsls	r1, r3, #29
 8000442:	d4f5      	bmi.n	8000430 <restore_non_core_regs+0x1c>
 8000444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000448:	f000 fc48 	bl	8000cdc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800044c:	6823      	ldr	r3, [r4, #0]
 800044e:	071a      	lsls	r2, r3, #28
 8000450:	d4f0      	bmi.n	8000434 <restore_non_core_regs+0x20>
 8000452:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000456:	f000 fc49 	bl	8000cec <__gnu_Unwind_Restore_WMMXD>
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	06db      	lsls	r3, r3, #27
 800045e:	d4eb      	bmi.n	8000438 <restore_non_core_regs+0x24>
 8000460:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000468:	f000 bc84 	b.w	8000d74 <__gnu_Unwind_Restore_WMMXC>

0800046c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800046c:	6803      	ldr	r3, [r0, #0]
 800046e:	b103      	cbz	r3, 8000472 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000470:	4403      	add	r3, r0
 8000472:	4618      	mov	r0, r3
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <__gnu_unwind_24bit.isra.1>:
 8000478:	2009      	movs	r0, #9
 800047a:	4770      	bx	lr

0800047c <_Unwind_DebugHook>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <unwind_phase2>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4604      	mov	r4, r0
 8000484:	460d      	mov	r5, r1
 8000486:	e008      	b.n	800049a <unwind_phase2+0x1a>
 8000488:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800048a:	6163      	str	r3, [r4, #20]
 800048c:	462a      	mov	r2, r5
 800048e:	6923      	ldr	r3, [r4, #16]
 8000490:	4621      	mov	r1, r4
 8000492:	2001      	movs	r0, #1
 8000494:	4798      	blx	r3
 8000496:	2808      	cmp	r0, #8
 8000498:	d108      	bne.n	80004ac <unwind_phase2+0x2c>
 800049a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800049c:	4620      	mov	r0, r4
 800049e:	f7ff ff69 	bl	8000374 <get_eit_entry>
 80004a2:	4606      	mov	r6, r0
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d0ef      	beq.n	8000488 <unwind_phase2+0x8>
 80004a8:	f002 f8f2 	bl	8002690 <abort>
 80004ac:	2807      	cmp	r0, #7
 80004ae:	d1fb      	bne.n	80004a8 <unwind_phase2+0x28>
 80004b0:	4630      	mov	r0, r6
 80004b2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b4:	f7ff ffe2 	bl	800047c <_Unwind_DebugHook>
 80004b8:	1d28      	adds	r0, r5, #4
 80004ba:	f000 fbf3 	bl	8000ca4 <__restore_core_regs>
 80004be:	bf00      	nop

080004c0 <unwind_phase2_forced>:
 80004c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004c4:	1d0c      	adds	r4, r1, #4
 80004c6:	4605      	mov	r5, r0
 80004c8:	4692      	mov	sl, r2
 80004ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004cc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80004d0:	ae03      	add	r6, sp, #12
 80004d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004e0:	ac02      	add	r4, sp, #8
 80004e2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80004e6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80004ea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80004ee:	2300      	movs	r3, #0
 80004f0:	4628      	mov	r0, r5
 80004f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80004f4:	6023      	str	r3, [r4, #0]
 80004f6:	f7ff ff3d 	bl	8000374 <get_eit_entry>
 80004fa:	f1ba 0f00 	cmp.w	sl, #0
 80004fe:	4607      	mov	r7, r0
 8000500:	bf14      	ite	ne
 8000502:	260a      	movne	r6, #10
 8000504:	2609      	moveq	r6, #9
 8000506:	b17f      	cbz	r7, 8000528 <unwind_phase2_forced+0x68>
 8000508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800050a:	f046 0110 	orr.w	r1, r6, #16
 800050e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000512:	462a      	mov	r2, r5
 8000514:	6463      	str	r3, [r4, #68]	; 0x44
 8000516:	2001      	movs	r0, #1
 8000518:	462b      	mov	r3, r5
 800051a:	47c0      	blx	r8
 800051c:	bb78      	cbnz	r0, 800057e <unwind_phase2_forced+0xbe>
 800051e:	4638      	mov	r0, r7
 8000520:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800052a:	616b      	str	r3, [r5, #20]
 800052c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000530:	4621      	mov	r1, r4
 8000532:	a87a      	add	r0, sp, #488	; 0x1e8
 8000534:	f002 f8b3 	bl	800269e <memcpy>
 8000538:	692b      	ldr	r3, [r5, #16]
 800053a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800053c:	4629      	mov	r1, r5
 800053e:	4630      	mov	r0, r6
 8000540:	4798      	blx	r3
 8000542:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000544:	4682      	mov	sl, r0
 8000546:	e88d 0210 	stmia.w	sp, {r4, r9}
 800054a:	4631      	mov	r1, r6
 800054c:	6463      	str	r3, [r4, #68]	; 0x44
 800054e:	462a      	mov	r2, r5
 8000550:	462b      	mov	r3, r5
 8000552:	2001      	movs	r0, #1
 8000554:	47c0      	blx	r8
 8000556:	b990      	cbnz	r0, 800057e <unwind_phase2_forced+0xbe>
 8000558:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800055c:	a97a      	add	r1, sp, #488	; 0x1e8
 800055e:	4620      	mov	r0, r4
 8000560:	f002 f89d 	bl	800269e <memcpy>
 8000564:	f1ba 0f08 	cmp.w	sl, #8
 8000568:	d106      	bne.n	8000578 <unwind_phase2_forced+0xb8>
 800056a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800056c:	4628      	mov	r0, r5
 800056e:	f7ff ff01 	bl	8000374 <get_eit_entry>
 8000572:	2609      	movs	r6, #9
 8000574:	4607      	mov	r7, r0
 8000576:	e7c6      	b.n	8000506 <unwind_phase2_forced+0x46>
 8000578:	f1ba 0f07 	cmp.w	sl, #7
 800057c:	d005      	beq.n	800058a <unwind_phase2_forced+0xca>
 800057e:	2709      	movs	r7, #9
 8000580:	4638      	mov	r0, r7
 8000582:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	4638      	mov	r0, r7
 800058c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800058e:	f7ff ff75 	bl	800047c <_Unwind_DebugHook>
 8000592:	a803      	add	r0, sp, #12
 8000594:	f000 fb86 	bl	8000ca4 <__restore_core_regs>

08000598 <_Unwind_GetCFA>:
 8000598:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800059a:	4770      	bx	lr

0800059c <__gnu_Unwind_RaiseException>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80005a0:	640b      	str	r3, [r1, #64]	; 0x40
 80005a2:	1d0e      	adds	r6, r1, #4
 80005a4:	460f      	mov	r7, r1
 80005a6:	4604      	mov	r4, r0
 80005a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80005aa:	b0f9      	sub	sp, #484	; 0x1e4
 80005ac:	ad01      	add	r5, sp, #4
 80005ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80005b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80005b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005bc:	f04f 36ff 	mov.w	r6, #4294967295
 80005c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80005c4:	9600      	str	r6, [sp, #0]
 80005c6:	e006      	b.n	80005d6 <__gnu_Unwind_RaiseException+0x3a>
 80005c8:	6923      	ldr	r3, [r4, #16]
 80005ca:	466a      	mov	r2, sp
 80005cc:	4621      	mov	r1, r4
 80005ce:	4798      	blx	r3
 80005d0:	2808      	cmp	r0, #8
 80005d2:	4605      	mov	r5, r0
 80005d4:	d108      	bne.n	80005e8 <__gnu_Unwind_RaiseException+0x4c>
 80005d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80005d8:	4620      	mov	r0, r4
 80005da:	f7ff fecb 	bl	8000374 <get_eit_entry>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d0f2      	beq.n	80005c8 <__gnu_Unwind_RaiseException+0x2c>
 80005e2:	2009      	movs	r0, #9
 80005e4:	b079      	add	sp, #484	; 0x1e4
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4668      	mov	r0, sp
 80005ea:	f7ff ff13 	bl	8000414 <restore_non_core_regs>
 80005ee:	2d06      	cmp	r5, #6
 80005f0:	d1f7      	bne.n	80005e2 <__gnu_Unwind_RaiseException+0x46>
 80005f2:	4639      	mov	r1, r7
 80005f4:	4620      	mov	r0, r4
 80005f6:	f7ff ff43 	bl	8000480 <unwind_phase2>
 80005fa:	bf00      	nop

080005fc <__gnu_Unwind_ForcedUnwind>:
 80005fc:	b430      	push	{r4, r5}
 80005fe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000600:	60c1      	str	r1, [r0, #12]
 8000602:	6182      	str	r2, [r0, #24]
 8000604:	4619      	mov	r1, r3
 8000606:	641d      	str	r5, [r3, #64]	; 0x40
 8000608:	2200      	movs	r2, #0
 800060a:	bc30      	pop	{r4, r5}
 800060c:	e758      	b.n	80004c0 <unwind_phase2_forced>
 800060e:	bf00      	nop

08000610 <__gnu_Unwind_Resume>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	68c6      	ldr	r6, [r0, #12]
 8000614:	6943      	ldr	r3, [r0, #20]
 8000616:	640b      	str	r3, [r1, #64]	; 0x40
 8000618:	b126      	cbz	r6, 8000624 <__gnu_Unwind_Resume+0x14>
 800061a:	2201      	movs	r2, #1
 800061c:	f7ff ff50 	bl	80004c0 <unwind_phase2_forced>
 8000620:	f002 f836 	bl	8002690 <abort>
 8000624:	6903      	ldr	r3, [r0, #16]
 8000626:	460a      	mov	r2, r1
 8000628:	4604      	mov	r4, r0
 800062a:	460d      	mov	r5, r1
 800062c:	4601      	mov	r1, r0
 800062e:	2002      	movs	r0, #2
 8000630:	4798      	blx	r3
 8000632:	2807      	cmp	r0, #7
 8000634:	d007      	beq.n	8000646 <__gnu_Unwind_Resume+0x36>
 8000636:	2808      	cmp	r0, #8
 8000638:	d103      	bne.n	8000642 <__gnu_Unwind_Resume+0x32>
 800063a:	4629      	mov	r1, r5
 800063c:	4620      	mov	r0, r4
 800063e:	f7ff ff1f 	bl	8000480 <unwind_phase2>
 8000642:	f002 f825 	bl	8002690 <abort>
 8000646:	4630      	mov	r0, r6
 8000648:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800064a:	f7ff ff17 	bl	800047c <_Unwind_DebugHook>
 800064e:	1d28      	adds	r0, r5, #4
 8000650:	f000 fb28 	bl	8000ca4 <__restore_core_regs>

08000654 <__gnu_Unwind_Resume_or_Rethrow>:
 8000654:	68c2      	ldr	r2, [r0, #12]
 8000656:	b11a      	cbz	r2, 8000660 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000658:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800065a:	640a      	str	r2, [r1, #64]	; 0x40
 800065c:	2200      	movs	r2, #0
 800065e:	e72f      	b.n	80004c0 <unwind_phase2_forced>
 8000660:	e79c      	b.n	800059c <__gnu_Unwind_RaiseException>
 8000662:	bf00      	nop

08000664 <_Unwind_Complete>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <_Unwind_DeleteException>:
 8000668:	6883      	ldr	r3, [r0, #8]
 800066a:	b113      	cbz	r3, 8000672 <_Unwind_DeleteException+0xa>
 800066c:	4601      	mov	r1, r0
 800066e:	2001      	movs	r0, #1
 8000670:	4718      	bx	r3
 8000672:	4770      	bx	lr

08000674 <_Unwind_VRS_Get>:
 8000674:	b500      	push	{lr}
 8000676:	2904      	cmp	r1, #4
 8000678:	d807      	bhi.n	800068a <_Unwind_VRS_Get+0x16>
 800067a:	e8df f001 	tbb	[pc, r1]
 800067e:	0903      	.short	0x0903
 8000680:	0906      	.short	0x0906
 8000682:	09          	.byte	0x09
 8000683:	00          	.byte	0x00
 8000684:	b90b      	cbnz	r3, 800068a <_Unwind_VRS_Get+0x16>
 8000686:	2a0f      	cmp	r2, #15
 8000688:	d905      	bls.n	8000696 <_Unwind_VRS_Get+0x22>
 800068a:	2002      	movs	r0, #2
 800068c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000690:	2001      	movs	r0, #1
 8000692:	f85d fb04 	ldr.w	pc, [sp], #4
 8000696:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800069a:	4618      	mov	r0, r3
 800069c:	6853      	ldr	r3, [r2, #4]
 800069e:	9a01      	ldr	r2, [sp, #4]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a6:	bf00      	nop

080006a8 <_Unwind_GetGR>:
 80006a8:	b510      	push	{r4, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	2300      	movs	r3, #0
 80006ae:	ac03      	add	r4, sp, #12
 80006b0:	460a      	mov	r2, r1
 80006b2:	9400      	str	r4, [sp, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f7ff ffdd 	bl	8000674 <_Unwind_VRS_Get>
 80006ba:	9803      	ldr	r0, [sp, #12]
 80006bc:	b004      	add	sp, #16
 80006be:	bd10      	pop	{r4, pc}

080006c0 <_Unwind_VRS_Set>:
 80006c0:	b500      	push	{lr}
 80006c2:	2904      	cmp	r1, #4
 80006c4:	d807      	bhi.n	80006d6 <_Unwind_VRS_Set+0x16>
 80006c6:	e8df f001 	tbb	[pc, r1]
 80006ca:	0903      	.short	0x0903
 80006cc:	0906      	.short	0x0906
 80006ce:	09          	.byte	0x09
 80006cf:	00          	.byte	0x00
 80006d0:	b90b      	cbnz	r3, 80006d6 <_Unwind_VRS_Set+0x16>
 80006d2:	2a0f      	cmp	r2, #15
 80006d4:	d905      	bls.n	80006e2 <_Unwind_VRS_Set+0x22>
 80006d6:	2002      	movs	r0, #2
 80006d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80006dc:	2001      	movs	r0, #1
 80006de:	f85d fb04 	ldr.w	pc, [sp], #4
 80006e2:	9901      	ldr	r1, [sp, #4]
 80006e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80006e8:	6809      	ldr	r1, [r1, #0]
 80006ea:	6051      	str	r1, [r2, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80006f2:	bf00      	nop

080006f4 <_Unwind_SetGR>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	ac04      	add	r4, sp, #16
 80006fa:	2300      	movs	r3, #0
 80006fc:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000700:	460a      	mov	r2, r1
 8000702:	9400      	str	r4, [sp, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f7ff ffdb 	bl	80006c0 <_Unwind_VRS_Set>
 800070a:	b004      	add	sp, #16
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop

08000710 <__gnu_Unwind_Backtrace>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	1d15      	adds	r5, r2, #4
 8000718:	4607      	mov	r7, r0
 800071a:	460e      	mov	r6, r1
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000722:	ac17      	add	r4, sp, #92	; 0x5c
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000732:	f04f 35ff 	mov.w	r5, #4294967295
 8000736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800073a:	9516      	str	r5, [sp, #88]	; 0x58
 800073c:	e010      	b.n	8000760 <__gnu_Unwind_Backtrace+0x50>
 800073e:	a816      	add	r0, sp, #88	; 0x58
 8000740:	f7ff ffd8 	bl	80006f4 <_Unwind_SetGR>
 8000744:	4631      	mov	r1, r6
 8000746:	a816      	add	r0, sp, #88	; 0x58
 8000748:	47b8      	blx	r7
 800074a:	aa16      	add	r2, sp, #88	; 0x58
 800074c:	4669      	mov	r1, sp
 800074e:	b978      	cbnz	r0, 8000770 <__gnu_Unwind_Backtrace+0x60>
 8000750:	9b04      	ldr	r3, [sp, #16]
 8000752:	2008      	movs	r0, #8
 8000754:	4798      	blx	r3
 8000756:	2805      	cmp	r0, #5
 8000758:	4604      	mov	r4, r0
 800075a:	d00a      	beq.n	8000772 <__gnu_Unwind_Backtrace+0x62>
 800075c:	2809      	cmp	r0, #9
 800075e:	d007      	beq.n	8000770 <__gnu_Unwind_Backtrace+0x60>
 8000760:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000762:	4668      	mov	r0, sp
 8000764:	f7ff fe06 	bl	8000374 <get_eit_entry>
 8000768:	466a      	mov	r2, sp
 800076a:	210c      	movs	r1, #12
 800076c:	2800      	cmp	r0, #0
 800076e:	d0e6      	beq.n	800073e <__gnu_Unwind_Backtrace+0x2e>
 8000770:	2409      	movs	r4, #9
 8000772:	a816      	add	r0, sp, #88	; 0x58
 8000774:	f7ff fe4e 	bl	8000414 <restore_non_core_regs>
 8000778:	4620      	mov	r0, r4
 800077a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800077e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000780 <__gnu_unwind_pr_common>:
 8000780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000784:	460d      	mov	r5, r1
 8000786:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000788:	b08b      	sub	sp, #44	; 0x2c
 800078a:	1d0c      	adds	r4, r1, #4
 800078c:	6809      	ldr	r1, [r1, #0]
 800078e:	9107      	str	r1, [sp, #28]
 8000790:	4691      	mov	r9, r2
 8000792:	9408      	str	r4, [sp, #32]
 8000794:	f000 0b03 	and.w	fp, r0, #3
 8000798:	461e      	mov	r6, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d160      	bne.n	8000860 <__gnu_unwind_pr_common+0xe0>
 800079e:	0209      	lsls	r1, r1, #8
 80007a0:	2303      	movs	r3, #3
 80007a2:	9107      	str	r1, [sp, #28]
 80007a4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80007a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80007ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80007ae:	f1bb 0f02 	cmp.w	fp, #2
 80007b2:	bf08      	it	eq
 80007b4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80007b6:	f013 0301 	ands.w	r3, r3, #1
 80007ba:	d140      	bne.n	800083e <__gnu_unwind_pr_common+0xbe>
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f000 0308 	and.w	r3, r0, #8
 80007c2:	9303      	str	r3, [sp, #12]
 80007c4:	f8d4 8000 	ldr.w	r8, [r4]
 80007c8:	f1b8 0f00 	cmp.w	r8, #0
 80007cc:	d039      	beq.n	8000842 <__gnu_unwind_pr_common+0xc2>
 80007ce:	2e02      	cmp	r6, #2
 80007d0:	d043      	beq.n	800085a <__gnu_unwind_pr_common+0xda>
 80007d2:	f8b4 8000 	ldrh.w	r8, [r4]
 80007d6:	8867      	ldrh	r7, [r4, #2]
 80007d8:	3404      	adds	r4, #4
 80007da:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80007dc:	f027 0a01 	bic.w	sl, r7, #1
 80007e0:	210f      	movs	r1, #15
 80007e2:	4648      	mov	r0, r9
 80007e4:	449a      	add	sl, r3
 80007e6:	f7ff ff5f 	bl	80006a8 <_Unwind_GetGR>
 80007ea:	4582      	cmp	sl, r0
 80007ec:	d833      	bhi.n	8000856 <__gnu_unwind_pr_common+0xd6>
 80007ee:	f028 0301 	bic.w	r3, r8, #1
 80007f2:	449a      	add	sl, r3
 80007f4:	4550      	cmp	r0, sl
 80007f6:	bf2c      	ite	cs
 80007f8:	2000      	movcs	r0, #0
 80007fa:	2001      	movcc	r0, #1
 80007fc:	007f      	lsls	r7, r7, #1
 80007fe:	f007 0702 	and.w	r7, r7, #2
 8000802:	f008 0801 	and.w	r8, r8, #1
 8000806:	ea47 0708 	orr.w	r7, r7, r8
 800080a:	2f01      	cmp	r7, #1
 800080c:	d03e      	beq.n	800088c <__gnu_unwind_pr_common+0x10c>
 800080e:	d335      	bcc.n	800087c <__gnu_unwind_pr_common+0xfc>
 8000810:	2f02      	cmp	r7, #2
 8000812:	d11c      	bne.n	800084e <__gnu_unwind_pr_common+0xce>
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800081a:	9202      	str	r2, [sp, #8]
 800081c:	f1bb 0f00 	cmp.w	fp, #0
 8000820:	d176      	bne.n	8000910 <__gnu_unwind_pr_common+0x190>
 8000822:	b128      	cbz	r0, 8000830 <__gnu_unwind_pr_common+0xb0>
 8000824:	9903      	ldr	r1, [sp, #12]
 8000826:	2900      	cmp	r1, #0
 8000828:	d07e      	beq.n	8000928 <__gnu_unwind_pr_common+0x1a8>
 800082a:	2a00      	cmp	r2, #0
 800082c:	f000 80a6 	beq.w	800097c <__gnu_unwind_pr_common+0x1fc>
 8000830:	2b00      	cmp	r3, #0
 8000832:	db77      	blt.n	8000924 <__gnu_unwind_pr_common+0x1a4>
 8000834:	9b02      	ldr	r3, [sp, #8]
 8000836:	3301      	adds	r3, #1
 8000838:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800083c:	e7c2      	b.n	80007c4 <__gnu_unwind_pr_common+0x44>
 800083e:	2300      	movs	r3, #0
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2e02      	cmp	r6, #2
 8000844:	dd3e      	ble.n	80008c4 <__gnu_unwind_pr_common+0x144>
 8000846:	f7ff fe17 	bl	8000478 <__gnu_unwind_24bit.isra.1>
 800084a:	2800      	cmp	r0, #0
 800084c:	d040      	beq.n	80008d0 <__gnu_unwind_pr_common+0x150>
 800084e:	2009      	movs	r0, #9
 8000850:	b00b      	add	sp, #44	; 0x2c
 8000852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000856:	2000      	movs	r0, #0
 8000858:	e7d0      	b.n	80007fc <__gnu_unwind_pr_common+0x7c>
 800085a:	6867      	ldr	r7, [r4, #4]
 800085c:	3408      	adds	r4, #8
 800085e:	e7bc      	b.n	80007da <__gnu_unwind_pr_common+0x5a>
 8000860:	2b02      	cmp	r3, #2
 8000862:	dca3      	bgt.n	80007ac <__gnu_unwind_pr_common+0x2c>
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	b2da      	uxtb	r2, r3
 8000868:	0409      	lsls	r1, r1, #16
 800086a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800086e:	2302      	movs	r3, #2
 8000870:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000874:	9107      	str	r1, [sp, #28]
 8000876:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800087a:	e797      	b.n	80007ac <__gnu_unwind_pr_common+0x2c>
 800087c:	f1bb 0f00 	cmp.w	fp, #0
 8000880:	d002      	beq.n	8000888 <__gnu_unwind_pr_common+0x108>
 8000882:	2800      	cmp	r0, #0
 8000884:	f040 80bd 	bne.w	8000a02 <__gnu_unwind_pr_common+0x282>
 8000888:	3404      	adds	r4, #4
 800088a:	e79b      	b.n	80007c4 <__gnu_unwind_pr_common+0x44>
 800088c:	f1bb 0f00 	cmp.w	fp, #0
 8000890:	d125      	bne.n	80008de <__gnu_unwind_pr_common+0x15e>
 8000892:	b1a8      	cbz	r0, 80008c0 <__gnu_unwind_pr_common+0x140>
 8000894:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000898:	1c99      	adds	r1, r3, #2
 800089a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800089e:	d0d6      	beq.n	800084e <__gnu_unwind_pr_common+0xce>
 80008a0:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80008a4:	3301      	adds	r3, #1
 80008a6:	9106      	str	r1, [sp, #24]
 80008a8:	f000 80a3 	beq.w	80009f2 <__gnu_unwind_pr_common+0x272>
 80008ac:	1d20      	adds	r0, r4, #4
 80008ae:	f7ff fddd 	bl	800046c <_Unwind_decode_typeinfo_ptr.isra.0>
 80008b2:	ab06      	add	r3, sp, #24
 80008b4:	4601      	mov	r1, r0
 80008b6:	4628      	mov	r0, r5
 80008b8:	f3af 8000 	nop.w
 80008bc:	2800      	cmp	r0, #0
 80008be:	d177      	bne.n	80009b0 <__gnu_unwind_pr_common+0x230>
 80008c0:	3408      	adds	r4, #8
 80008c2:	e77f      	b.n	80007c4 <__gnu_unwind_pr_common+0x44>
 80008c4:	a907      	add	r1, sp, #28
 80008c6:	4648      	mov	r0, r9
 80008c8:	f000 faee 	bl	8000ea8 <__gnu_unwind_execute>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d1be      	bne.n	800084e <__gnu_unwind_pr_common+0xce>
 80008d0:	9b01      	ldr	r3, [sp, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d15c      	bne.n	8000990 <__gnu_unwind_pr_common+0x210>
 80008d6:	2008      	movs	r0, #8
 80008d8:	b00b      	add	sp, #44	; 0x2c
 80008da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008de:	210d      	movs	r1, #13
 80008e0:	4648      	mov	r0, r9
 80008e2:	6a2f      	ldr	r7, [r5, #32]
 80008e4:	f7ff fee0 	bl	80006a8 <_Unwind_GetGR>
 80008e8:	4287      	cmp	r7, r0
 80008ea:	d1e9      	bne.n	80008c0 <__gnu_unwind_pr_common+0x140>
 80008ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008ee:	429c      	cmp	r4, r3
 80008f0:	d1e6      	bne.n	80008c0 <__gnu_unwind_pr_common+0x140>
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff fcf0 	bl	80002d8 <selfrel_offset31>
 80008f8:	210f      	movs	r1, #15
 80008fa:	4602      	mov	r2, r0
 80008fc:	4648      	mov	r0, r9
 80008fe:	f7ff fef9 	bl	80006f4 <_Unwind_SetGR>
 8000902:	4648      	mov	r0, r9
 8000904:	462a      	mov	r2, r5
 8000906:	2100      	movs	r1, #0
 8000908:	f7ff fef4 	bl	80006f4 <_Unwind_SetGR>
 800090c:	2007      	movs	r0, #7
 800090e:	e79f      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 8000910:	210d      	movs	r1, #13
 8000912:	4648      	mov	r0, r9
 8000914:	6a2f      	ldr	r7, [r5, #32]
 8000916:	f7ff fec7 	bl	80006a8 <_Unwind_GetGR>
 800091a:	4287      	cmp	r7, r0
 800091c:	d058      	beq.n	80009d0 <__gnu_unwind_pr_common+0x250>
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	da87      	bge.n	8000834 <__gnu_unwind_pr_common+0xb4>
 8000924:	3404      	adds	r4, #4
 8000926:	e785      	b.n	8000834 <__gnu_unwind_pr_common+0xb4>
 8000928:	9b02      	ldr	r3, [sp, #8]
 800092a:	b33b      	cbz	r3, 800097c <__gnu_unwind_pr_common+0x1fc>
 800092c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000930:	1d27      	adds	r7, r4, #4
 8000932:	f8cd b010 	str.w	fp, [sp, #16]
 8000936:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800093a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800093e:	9605      	str	r6, [sp, #20]
 8000940:	46a3      	mov	fp, r4
 8000942:	461c      	mov	r4, r3
 8000944:	e002      	b.n	800094c <__gnu_unwind_pr_common+0x1cc>
 8000946:	45b2      	cmp	sl, r6
 8000948:	46b0      	mov	r8, r6
 800094a:	d016      	beq.n	800097a <__gnu_unwind_pr_common+0x1fa>
 800094c:	4638      	mov	r0, r7
 800094e:	9406      	str	r4, [sp, #24]
 8000950:	f7ff fd8c 	bl	800046c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000954:	ab06      	add	r3, sp, #24
 8000956:	4601      	mov	r1, r0
 8000958:	2200      	movs	r2, #0
 800095a:	4628      	mov	r0, r5
 800095c:	f3af 8000 	nop.w
 8000960:	f108 0601 	add.w	r6, r8, #1
 8000964:	3704      	adds	r7, #4
 8000966:	2800      	cmp	r0, #0
 8000968:	d0ed      	beq.n	8000946 <__gnu_unwind_pr_common+0x1c6>
 800096a:	9b02      	ldr	r3, [sp, #8]
 800096c:	9e05      	ldr	r6, [sp, #20]
 800096e:	4543      	cmp	r3, r8
 8000970:	465c      	mov	r4, fp
 8000972:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000976:	d1d2      	bne.n	800091e <__gnu_unwind_pr_common+0x19e>
 8000978:	e000      	b.n	800097c <__gnu_unwind_pr_common+0x1fc>
 800097a:	465c      	mov	r4, fp
 800097c:	4648      	mov	r0, r9
 800097e:	210d      	movs	r1, #13
 8000980:	f7ff fe92 	bl	80006a8 <_Unwind_GetGR>
 8000984:	9b06      	ldr	r3, [sp, #24]
 8000986:	6228      	str	r0, [r5, #32]
 8000988:	62ac      	str	r4, [r5, #40]	; 0x28
 800098a:	626b      	str	r3, [r5, #36]	; 0x24
 800098c:	2006      	movs	r0, #6
 800098e:	e75f      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 8000990:	210f      	movs	r1, #15
 8000992:	4648      	mov	r0, r9
 8000994:	f7ff fe88 	bl	80006a8 <_Unwind_GetGR>
 8000998:	210e      	movs	r1, #14
 800099a:	4602      	mov	r2, r0
 800099c:	4648      	mov	r0, r9
 800099e:	f7ff fea9 	bl	80006f4 <_Unwind_SetGR>
 80009a2:	4648      	mov	r0, r9
 80009a4:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <__gnu_unwind_pr_common+0x2cc>)
 80009a6:	210f      	movs	r1, #15
 80009a8:	f7ff fea4 	bl	80006f4 <_Unwind_SetGR>
 80009ac:	2007      	movs	r0, #7
 80009ae:	e74f      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 80009b0:	4607      	mov	r7, r0
 80009b2:	210d      	movs	r1, #13
 80009b4:	4648      	mov	r0, r9
 80009b6:	f7ff fe77 	bl	80006a8 <_Unwind_GetGR>
 80009ba:	2f02      	cmp	r7, #2
 80009bc:	6228      	str	r0, [r5, #32]
 80009be:	d11d      	bne.n	80009fc <__gnu_unwind_pr_common+0x27c>
 80009c0:	462b      	mov	r3, r5
 80009c2:	9a06      	ldr	r2, [sp, #24]
 80009c4:	f843 2f2c 	str.w	r2, [r3, #44]!
 80009c8:	626b      	str	r3, [r5, #36]	; 0x24
 80009ca:	62ac      	str	r4, [r5, #40]	; 0x28
 80009cc:	2006      	movs	r0, #6
 80009ce:	e73f      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 80009d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80009d2:	429c      	cmp	r4, r3
 80009d4:	d1a3      	bne.n	800091e <__gnu_unwind_pr_common+0x19e>
 80009d6:	2204      	movs	r2, #4
 80009d8:	2700      	movs	r7, #0
 80009da:	18a3      	adds	r3, r4, r2
 80009dc:	9902      	ldr	r1, [sp, #8]
 80009de:	62a9      	str	r1, [r5, #40]	; 0x28
 80009e0:	62ef      	str	r7, [r5, #44]	; 0x2c
 80009e2:	632a      	str	r2, [r5, #48]	; 0x30
 80009e4:	636b      	str	r3, [r5, #52]	; 0x34
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	42bb      	cmp	r3, r7
 80009ea:	db1d      	blt.n	8000a28 <__gnu_unwind_pr_common+0x2a8>
 80009ec:	2301      	movs	r3, #1
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	e720      	b.n	8000834 <__gnu_unwind_pr_common+0xb4>
 80009f2:	4648      	mov	r0, r9
 80009f4:	210d      	movs	r1, #13
 80009f6:	f7ff fe57 	bl	80006a8 <_Unwind_GetGR>
 80009fa:	6228      	str	r0, [r5, #32]
 80009fc:	9b06      	ldr	r3, [sp, #24]
 80009fe:	626b      	str	r3, [r5, #36]	; 0x24
 8000a00:	e7e3      	b.n	80009ca <__gnu_unwind_pr_common+0x24a>
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff fc68 	bl	80002d8 <selfrel_offset31>
 8000a08:	3404      	adds	r4, #4
 8000a0a:	4606      	mov	r6, r0
 8000a0c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f3af 8000 	nop.w
 8000a14:	2800      	cmp	r0, #0
 8000a16:	f43f af1a 	beq.w	800084e <__gnu_unwind_pr_common+0xce>
 8000a1a:	4648      	mov	r0, r9
 8000a1c:	4632      	mov	r2, r6
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f7ff fe68 	bl	80006f4 <_Unwind_SetGR>
 8000a24:	2007      	movs	r0, #7
 8000a26:	e713      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 8000a28:	4608      	mov	r0, r1
 8000a2a:	3001      	adds	r0, #1
 8000a2c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000a30:	f7ff fc52 	bl	80002d8 <selfrel_offset31>
 8000a34:	210f      	movs	r1, #15
 8000a36:	4602      	mov	r2, r0
 8000a38:	4648      	mov	r0, r9
 8000a3a:	f7ff fe5b 	bl	80006f4 <_Unwind_SetGR>
 8000a3e:	4648      	mov	r0, r9
 8000a40:	462a      	mov	r2, r5
 8000a42:	4639      	mov	r1, r7
 8000a44:	f7ff fe56 	bl	80006f4 <_Unwind_SetGR>
 8000a48:	2007      	movs	r0, #7
 8000a4a:	e701      	b.n	8000850 <__gnu_unwind_pr_common+0xd0>
 8000a4c:	00000000 	.word	0x00000000

08000a50 <__aeabi_unwind_cpp_pr0>:
 8000a50:	2300      	movs	r3, #0
 8000a52:	e695      	b.n	8000780 <__gnu_unwind_pr_common>

08000a54 <__aeabi_unwind_cpp_pr1>:
 8000a54:	2301      	movs	r3, #1
 8000a56:	e693      	b.n	8000780 <__gnu_unwind_pr_common>

08000a58 <__aeabi_unwind_cpp_pr2>:
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e691      	b.n	8000780 <__gnu_unwind_pr_common>

08000a5c <_Unwind_VRS_Pop>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	4604      	mov	r4, r0
 8000a60:	b0c5      	sub	sp, #276	; 0x114
 8000a62:	2904      	cmp	r1, #4
 8000a64:	d80d      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000a66:	e8df f001 	tbb	[pc, r1]
 8000a6a:	0353      	.short	0x0353
 8000a6c:	310c      	.short	0x310c
 8000a6e:	0f          	.byte	0x0f
 8000a6f:	00          	.byte	0x00
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000a76:	b295      	uxth	r5, r2
 8000a78:	d162      	bne.n	8000b40 <_Unwind_VRS_Pop+0xe4>
 8000a7a:	1972      	adds	r2, r6, r5
 8000a7c:	2a10      	cmp	r2, #16
 8000a7e:	f240 809b 	bls.w	8000bb8 <_Unwind_VRS_Pop+0x15c>
 8000a82:	2002      	movs	r0, #2
 8000a84:	b045      	add	sp, #276	; 0x114
 8000a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1fa      	bne.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000a8c:	2a10      	cmp	r2, #16
 8000a8e:	d8f8      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	06d8      	lsls	r0, r3, #27
 8000a94:	f100 80c6 	bmi.w	8000c24 <_Unwind_VRS_Pop+0x1c8>
 8000a98:	ae22      	add	r6, sp, #136	; 0x88
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	f000 f973 	bl	8000d88 <__gnu_Unwind_Save_WMMXC>
 8000aa2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000aa4:	9a01      	ldr	r2, [sp, #4]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	fa05 f103 	lsl.w	r1, r5, r3
 8000aae:	4211      	tst	r1, r2
 8000ab0:	d003      	beq.n	8000aba <_Unwind_VRS_Pop+0x5e>
 8000ab2:	6801      	ldr	r1, [r0, #0]
 8000ab4:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000ab8:	3004      	adds	r0, #4
 8000aba:	3301      	adds	r3, #1
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d1f4      	bne.n	8000aaa <_Unwind_VRS_Pop+0x4e>
 8000ac0:	63a0      	str	r0, [r4, #56]	; 0x38
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f000 f956 	bl	8000d74 <__gnu_Unwind_Restore_WMMXC>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7db      	b.n	8000a84 <_Unwind_VRS_Pop+0x28>
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d1d8      	bne.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000ad0:	0c15      	lsrs	r5, r2, #16
 8000ad2:	b297      	uxth	r7, r2
 8000ad4:	19eb      	adds	r3, r5, r7
 8000ad6:	2b10      	cmp	r3, #16
 8000ad8:	d8d3      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	071e      	lsls	r6, r3, #28
 8000ade:	f100 80b5 	bmi.w	8000c4c <_Unwind_VRS_Pop+0x1f0>
 8000ae2:	ae22      	add	r6, sp, #136	; 0x88
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f000 f923 	bl	8000d30 <__gnu_Unwind_Save_WMMXD>
 8000aea:	00ed      	lsls	r5, r5, #3
 8000aec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aee:	b14f      	cbz	r7, 8000b04 <_Unwind_VRS_Pop+0xa8>
 8000af0:	3d04      	subs	r5, #4
 8000af2:	1971      	adds	r1, r6, r5
 8000af4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8000afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8000b00:	4283      	cmp	r3, r0
 8000b02:	d1f9      	bne.n	8000af8 <_Unwind_VRS_Pop+0x9c>
 8000b04:	4630      	mov	r0, r6
 8000b06:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b08:	f000 f8f0 	bl	8000cec <__gnu_Unwind_Restore_WMMXD>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e7b9      	b.n	8000a84 <_Unwind_VRS_Pop+0x28>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1b6      	bne.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000b14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000b16:	b297      	uxth	r7, r2
 8000b18:	1d20      	adds	r0, r4, #4
 8000b1a:	2601      	movs	r6, #1
 8000b1c:	fa06 f103 	lsl.w	r1, r6, r3
 8000b20:	4239      	tst	r1, r7
 8000b22:	f103 0301 	add.w	r3, r3, #1
 8000b26:	d002      	beq.n	8000b2e <_Unwind_VRS_Pop+0xd2>
 8000b28:	6829      	ldr	r1, [r5, #0]
 8000b2a:	6001      	str	r1, [r0, #0]
 8000b2c:	3504      	adds	r5, #4
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	f100 0004 	add.w	r0, r0, #4
 8000b34:	d1f2      	bne.n	8000b1c <_Unwind_VRS_Pop+0xc0>
 8000b36:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000b3a:	d13b      	bne.n	8000bb4 <_Unwind_VRS_Pop+0x158>
 8000b3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000b3e:	e7a1      	b.n	8000a84 <_Unwind_VRS_Pop+0x28>
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d19e      	bne.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000b44:	1977      	adds	r7, r6, r5
 8000b46:	2f20      	cmp	r7, #32
 8000b48:	d89b      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x26>
 8000b4a:	2e0f      	cmp	r6, #15
 8000b4c:	d966      	bls.n	8000c1c <_Unwind_VRS_Pop+0x1c0>
 8000b4e:	462f      	mov	r7, r5
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d13a      	bne.n	8000bca <_Unwind_VRS_Pop+0x16e>
 8000b54:	462a      	mov	r2, r5
 8000b56:	2700      	movs	r7, #0
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000b5c:	dd72      	ble.n	8000c44 <_Unwind_VRS_Pop+0x1e8>
 8000b5e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000b62:	4601      	mov	r1, r0
 8000b64:	a844      	add	r0, sp, #272	; 0x110
 8000b66:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000b6a:	388c      	subs	r0, #140	; 0x8c
 8000b6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000b70:	f840 5f04 	str.w	r5, [r0, #4]!
 8000b74:	4291      	cmp	r1, r2
 8000b76:	d1f9      	bne.n	8000b6c <_Unwind_VRS_Pop+0x110>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	b197      	cbz	r7, 8000ba2 <_Unwind_VRS_Pop+0x146>
 8000b7c:	2e10      	cmp	r6, #16
 8000b7e:	4632      	mov	r2, r6
 8000b80:	a944      	add	r1, sp, #272	; 0x110
 8000b82:	bf38      	it	cc
 8000b84:	2210      	movcc	r2, #16
 8000b86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000b8a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000b8e:	0079      	lsls	r1, r7, #1
 8000b90:	3a04      	subs	r2, #4
 8000b92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000b96:	f850 5b04 	ldr.w	r5, [r0], #4
 8000b9a:	f842 5f04 	str.w	r5, [r2, #4]!
 8000b9e:	4288      	cmp	r0, r1
 8000ba0:	d1f9      	bne.n	8000b96 <_Unwind_VRS_Pop+0x13a>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d048      	beq.n	8000c38 <_Unwind_VRS_Pop+0x1dc>
 8000ba6:	2e0f      	cmp	r6, #15
 8000ba8:	63a1      	str	r1, [r4, #56]	; 0x38
 8000baa:	d933      	bls.n	8000c14 <_Unwind_VRS_Pop+0x1b8>
 8000bac:	b117      	cbz	r7, 8000bb4 <_Unwind_VRS_Pop+0x158>
 8000bae:	a802      	add	r0, sp, #8
 8000bb0:	f000 f894 	bl	8000cdc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e765      	b.n	8000a84 <_Unwind_VRS_Pop+0x28>
 8000bb8:	2e0f      	cmp	r6, #15
 8000bba:	f63f af62 	bhi.w	8000a82 <_Unwind_VRS_Pop+0x26>
 8000bbe:	2700      	movs	r7, #0
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	07d1      	lsls	r1, r2, #31
 8000bc4:	d417      	bmi.n	8000bf6 <_Unwind_VRS_Pop+0x19a>
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d060      	beq.n	8000c8c <_Unwind_VRS_Pop+0x230>
 8000bca:	6822      	ldr	r2, [r4, #0]
 8000bcc:	0751      	lsls	r1, r2, #29
 8000bce:	d445      	bmi.n	8000c5c <_Unwind_VRS_Pop+0x200>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d04d      	beq.n	8000c70 <_Unwind_VRS_Pop+0x214>
 8000bd4:	2e0f      	cmp	r6, #15
 8000bd6:	d806      	bhi.n	8000be6 <_Unwind_VRS_Pop+0x18a>
 8000bd8:	a822      	add	r0, sp, #136	; 0x88
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	f000 f87a 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D>
 8000be0:	9b01      	ldr	r3, [sp, #4]
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d0b6      	beq.n	8000b54 <_Unwind_VRS_Pop+0xf8>
 8000be6:	a802      	add	r0, sp, #8
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	f000 f87b 	bl	8000ce4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	f1c6 0210 	rsb	r2, r6, #16
 8000bf4:	e7b0      	b.n	8000b58 <_Unwind_VRS_Pop+0xfc>
 8000bf6:	f022 0101 	bic.w	r1, r2, #1
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	6021      	str	r1, [r4, #0]
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	4620      	mov	r0, r4
 8000c02:	d03b      	beq.n	8000c7c <_Unwind_VRS_Pop+0x220>
 8000c04:	f022 0203 	bic.w	r2, r2, #3
 8000c08:	f840 2b48 	str.w	r2, [r0], #72
 8000c0c:	f000 f85a 	bl	8000cc4 <__gnu_Unwind_Save_VFP>
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	e7d8      	b.n	8000bc6 <_Unwind_VRS_Pop+0x16a>
 8000c14:	a822      	add	r0, sp, #136	; 0x88
 8000c16:	f000 f859 	bl	8000ccc <__gnu_Unwind_Restore_VFP_D>
 8000c1a:	e7c7      	b.n	8000bac <_Unwind_VRS_Pop+0x150>
 8000c1c:	2f10      	cmp	r7, #16
 8000c1e:	d9ce      	bls.n	8000bbe <_Unwind_VRS_Pop+0x162>
 8000c20:	3f10      	subs	r7, #16
 8000c22:	e7cd      	b.n	8000bc0 <_Unwind_VRS_Pop+0x164>
 8000c24:	f023 0310 	bic.w	r3, r3, #16
 8000c28:	6023      	str	r3, [r4, #0]
 8000c2a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	f000 f8aa 	bl	8000d88 <__gnu_Unwind_Save_WMMXC>
 8000c34:	9a01      	ldr	r2, [sp, #4]
 8000c36:	e72f      	b.n	8000a98 <_Unwind_VRS_Pop+0x3c>
 8000c38:	3104      	adds	r1, #4
 8000c3a:	63a1      	str	r1, [r4, #56]	; 0x38
 8000c3c:	a822      	add	r0, sp, #136	; 0x88
 8000c3e:	f000 f83d 	bl	8000cbc <__gnu_Unwind_Restore_VFP>
 8000c42:	e7b7      	b.n	8000bb4 <_Unwind_VRS_Pop+0x158>
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d199      	bne.n	8000b7c <_Unwind_VRS_Pop+0x120>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	e7aa      	b.n	8000ba2 <_Unwind_VRS_Pop+0x146>
 8000c4c:	f023 0308 	bic.w	r3, r3, #8
 8000c50:	6023      	str	r3, [r4, #0]
 8000c52:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c56:	f000 f86b 	bl	8000d30 <__gnu_Unwind_Save_WMMXD>
 8000c5a:	e742      	b.n	8000ae2 <_Unwind_VRS_Pop+0x86>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f022 0204 	bic.w	r2, r2, #4
 8000c62:	f840 2bd0 	str.w	r2, [r0], #208
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	f000 f83c 	bl	8000ce4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000c6c:	9b01      	ldr	r3, [sp, #4]
 8000c6e:	e7af      	b.n	8000bd0 <_Unwind_VRS_Pop+0x174>
 8000c70:	a822      	add	r0, sp, #136	; 0x88
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	f000 f826 	bl	8000cc4 <__gnu_Unwind_Save_VFP>
 8000c78:	9b01      	ldr	r3, [sp, #4]
 8000c7a:	e7b9      	b.n	8000bf0 <_Unwind_VRS_Pop+0x194>
 8000c7c:	f041 0102 	orr.w	r1, r1, #2
 8000c80:	f840 1b48 	str.w	r1, [r0], #72
 8000c84:	f000 f826 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D>
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	e79c      	b.n	8000bc6 <_Unwind_VRS_Pop+0x16a>
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <_Unwind_VRS_Pop+0x23c>
 8000c90:	2e0f      	cmp	r6, #15
 8000c92:	f63f af5f 	bhi.w	8000b54 <_Unwind_VRS_Pop+0xf8>
 8000c96:	e79f      	b.n	8000bd8 <_Unwind_VRS_Pop+0x17c>
 8000c98:	a822      	add	r0, sp, #136	; 0x88
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	f000 f812 	bl	8000cc4 <__gnu_Unwind_Save_VFP>
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	e757      	b.n	8000b54 <_Unwind_VRS_Pop+0xf8>

08000ca4 <__restore_core_regs>:
 8000ca4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ca8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000cac:	469c      	mov	ip, r3
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000cb4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000cb8:	46e5      	mov	sp, ip
 8000cba:	bd00      	pop	{pc}

08000cbc <__gnu_Unwind_Restore_VFP>:
 8000cbc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <__gnu_Unwind_Save_VFP>:
 8000cc4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__gnu_Unwind_Restore_VFP_D>:
 8000ccc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__gnu_Unwind_Save_VFP_D>:
 8000cd4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000cdc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ce4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__gnu_Unwind_Restore_WMMXD>:
 8000cec:	ecf0 0102 	ldfe	f0, [r0], #8
 8000cf0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000cf4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000cf8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000cfc:	ecf0 4102 	ldfe	f4, [r0], #8
 8000d00:	ecf0 5102 	ldfe	f5, [r0], #8
 8000d04:	ecf0 6102 	ldfe	f6, [r0], #8
 8000d08:	ecf0 7102 	ldfe	f7, [r0], #8
 8000d0c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000d10:	ecf0 9102 	ldfp	f1, [r0], #8
 8000d14:	ecf0 a102 	ldfp	f2, [r0], #8
 8000d18:	ecf0 b102 	ldfp	f3, [r0], #8
 8000d1c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000d20:	ecf0 d102 	ldfp	f5, [r0], #8
 8000d24:	ecf0 e102 	ldfp	f6, [r0], #8
 8000d28:	ecf0 f102 	ldfp	f7, [r0], #8
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <__gnu_Unwind_Save_WMMXD>:
 8000d30:	ece0 0102 	stfe	f0, [r0], #8
 8000d34:	ece0 1102 	stfe	f1, [r0], #8
 8000d38:	ece0 2102 	stfe	f2, [r0], #8
 8000d3c:	ece0 3102 	stfe	f3, [r0], #8
 8000d40:	ece0 4102 	stfe	f4, [r0], #8
 8000d44:	ece0 5102 	stfe	f5, [r0], #8
 8000d48:	ece0 6102 	stfe	f6, [r0], #8
 8000d4c:	ece0 7102 	stfe	f7, [r0], #8
 8000d50:	ece0 8102 	stfp	f0, [r0], #8
 8000d54:	ece0 9102 	stfp	f1, [r0], #8
 8000d58:	ece0 a102 	stfp	f2, [r0], #8
 8000d5c:	ece0 b102 	stfp	f3, [r0], #8
 8000d60:	ece0 c102 	stfp	f4, [r0], #8
 8000d64:	ece0 d102 	stfp	f5, [r0], #8
 8000d68:	ece0 e102 	stfp	f6, [r0], #8
 8000d6c:	ece0 f102 	stfp	f7, [r0], #8
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <__gnu_Unwind_Restore_WMMXC>:
 8000d74:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000d78:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000d7c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d80:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__gnu_Unwind_Save_WMMXC>:
 8000d88:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d8c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d90:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d94:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <_Unwind_RaiseException>:
 8000d9c:	46ec      	mov	ip, sp
 8000d9e:	b500      	push	{lr}
 8000da0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000da4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000db0:	a901      	add	r1, sp, #4
 8000db2:	f7ff fbf3 	bl	800059c <__gnu_Unwind_RaiseException>
 8000db6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dba:	b012      	add	sp, #72	; 0x48
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <_Unwind_Resume>:
 8000dc0:	46ec      	mov	ip, sp
 8000dc2:	b500      	push	{lr}
 8000dc4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000dc8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dd4:	a901      	add	r1, sp, #4
 8000dd6:	f7ff fc1b 	bl	8000610 <__gnu_Unwind_Resume>
 8000dda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dde:	b012      	add	sp, #72	; 0x48
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <_Unwind_Resume_or_Rethrow>:
 8000de4:	46ec      	mov	ip, sp
 8000de6:	b500      	push	{lr}
 8000de8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000dec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000df8:	a901      	add	r1, sp, #4
 8000dfa:	f7ff fc2b 	bl	8000654 <__gnu_Unwind_Resume_or_Rethrow>
 8000dfe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000e02:	b012      	add	sp, #72	; 0x48
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <_Unwind_ForcedUnwind>:
 8000e08:	46ec      	mov	ip, sp
 8000e0a:	b500      	push	{lr}
 8000e0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e1c:	ab01      	add	r3, sp, #4
 8000e1e:	f7ff fbed 	bl	80005fc <__gnu_Unwind_ForcedUnwind>
 8000e22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000e26:	b012      	add	sp, #72	; 0x48
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <_Unwind_Backtrace>:
 8000e2c:	46ec      	mov	ip, sp
 8000e2e:	b500      	push	{lr}
 8000e30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e40:	aa01      	add	r2, sp, #4
 8000e42:	f7ff fc65 	bl	8000710 <__gnu_Unwind_Backtrace>
 8000e46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000e4a:	b012      	add	sp, #72	; 0x48
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <next_unwind_byte>:
 8000e50:	7a02      	ldrb	r2, [r0, #8]
 8000e52:	b91a      	cbnz	r2, 8000e5c <next_unwind_byte+0xc>
 8000e54:	7a43      	ldrb	r3, [r0, #9]
 8000e56:	b943      	cbnz	r3, 8000e6a <next_unwind_byte+0x1a>
 8000e58:	20b0      	movs	r0, #176	; 0xb0
 8000e5a:	4770      	bx	lr
 8000e5c:	6803      	ldr	r3, [r0, #0]
 8000e5e:	3a01      	subs	r2, #1
 8000e60:	7202      	strb	r2, [r0, #8]
 8000e62:	021a      	lsls	r2, r3, #8
 8000e64:	6002      	str	r2, [r0, #0]
 8000e66:	0e18      	lsrs	r0, r3, #24
 8000e68:	4770      	bx	lr
 8000e6a:	6842      	ldr	r2, [r0, #4]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b410      	push	{r4}
 8000e70:	7243      	strb	r3, [r0, #9]
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	2103      	movs	r1, #3
 8000e76:	1d14      	adds	r4, r2, #4
 8000e78:	7201      	strb	r1, [r0, #8]
 8000e7a:	021a      	lsls	r2, r3, #8
 8000e7c:	6044      	str	r4, [r0, #4]
 8000e7e:	6002      	str	r2, [r0, #0]
 8000e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e84:	0e18      	lsrs	r0, r3, #24
 8000e86:	4770      	bx	lr

08000e88 <_Unwind_GetGR.constprop.0>:
 8000e88:	b500      	push	{lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	aa03      	add	r2, sp, #12
 8000e8e:	2300      	movs	r3, #0
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	220c      	movs	r2, #12
 8000e96:	f7ff fbed 	bl	8000674 <_Unwind_VRS_Get>
 8000e9a:	9803      	ldr	r0, [sp, #12]
 8000e9c:	b005      	add	sp, #20
 8000e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea2:	bf00      	nop

08000ea4 <unwind_UCB_from_context>:
 8000ea4:	e7f0      	b.n	8000e88 <_Unwind_GetGR.constprop.0>
 8000ea6:	bf00      	nop

08000ea8 <__gnu_unwind_execute>:
 8000ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eac:	4606      	mov	r6, r0
 8000eae:	b085      	sub	sp, #20
 8000eb0:	460f      	mov	r7, r1
 8000eb2:	f04f 0800 	mov.w	r8, #0
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	f7ff ffca 	bl	8000e50 <next_unwind_byte>
 8000ebc:	28b0      	cmp	r0, #176	; 0xb0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	d023      	beq.n	8000f0a <__gnu_unwind_execute+0x62>
 8000ec2:	0605      	lsls	r5, r0, #24
 8000ec4:	d427      	bmi.n	8000f16 <__gnu_unwind_execute+0x6e>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f10d 090c 	add.w	r9, sp, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	0085      	lsls	r5, r0, #2
 8000ed0:	220d      	movs	r2, #13
 8000ed2:	f8cd 9000 	str.w	r9, [sp]
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	f7ff fbcc 	bl	8000674 <_Unwind_VRS_Get>
 8000edc:	b2ed      	uxtb	r5, r5
 8000ede:	9b03      	ldr	r3, [sp, #12]
 8000ee0:	f8cd 9000 	str.w	r9, [sp]
 8000ee4:	0660      	lsls	r0, r4, #25
 8000ee6:	f105 0504 	add.w	r5, r5, #4
 8000eea:	bf4c      	ite	mi
 8000eec:	1b5d      	submi	r5, r3, r5
 8000eee:	18ed      	addpl	r5, r5, r3
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	220d      	movs	r2, #13
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	9503      	str	r5, [sp, #12]
 8000efa:	f7ff fbe1 	bl	80006c0 <_Unwind_VRS_Set>
 8000efe:	4638      	mov	r0, r7
 8000f00:	f7ff ffa6 	bl	8000e50 <next_unwind_byte>
 8000f04:	28b0      	cmp	r0, #176	; 0xb0
 8000f06:	4604      	mov	r4, r0
 8000f08:	d1db      	bne.n	8000ec2 <__gnu_unwind_execute+0x1a>
 8000f0a:	f1b8 0f00 	cmp.w	r8, #0
 8000f0e:	f000 8095 	beq.w	800103c <__gnu_unwind_execute+0x194>
 8000f12:	2000      	movs	r0, #0
 8000f14:	e01c      	b.n	8000f50 <__gnu_unwind_execute+0xa8>
 8000f16:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000f1a:	2b80      	cmp	r3, #128	; 0x80
 8000f1c:	d05d      	beq.n	8000fda <__gnu_unwind_execute+0x132>
 8000f1e:	2b90      	cmp	r3, #144	; 0x90
 8000f20:	d019      	beq.n	8000f56 <__gnu_unwind_execute+0xae>
 8000f22:	2ba0      	cmp	r3, #160	; 0xa0
 8000f24:	d02c      	beq.n	8000f80 <__gnu_unwind_execute+0xd8>
 8000f26:	2bb0      	cmp	r3, #176	; 0xb0
 8000f28:	d03f      	beq.n	8000faa <__gnu_unwind_execute+0x102>
 8000f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000f2c:	d06c      	beq.n	8001008 <__gnu_unwind_execute+0x160>
 8000f2e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f32:	2bd0      	cmp	r3, #208	; 0xd0
 8000f34:	d10b      	bne.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000f36:	f000 0207 	and.w	r2, r0, #7
 8000f3a:	3201      	adds	r2, #1
 8000f3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f40:	2305      	movs	r3, #5
 8000f42:	2101      	movs	r1, #1
 8000f44:	4630      	mov	r0, r6
 8000f46:	f7ff fd89 	bl	8000a5c <_Unwind_VRS_Pop>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d0b3      	beq.n	8000eb6 <__gnu_unwind_execute+0xe>
 8000f4e:	2009      	movs	r0, #9
 8000f50:	b005      	add	sp, #20
 8000f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f56:	f000 030d 	and.w	r3, r0, #13
 8000f5a:	2b0d      	cmp	r3, #13
 8000f5c:	d0f7      	beq.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000f5e:	ad03      	add	r5, sp, #12
 8000f60:	2300      	movs	r3, #0
 8000f62:	f000 020f 	and.w	r2, r0, #15
 8000f66:	4619      	mov	r1, r3
 8000f68:	9500      	str	r5, [sp, #0]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f7ff fb82 	bl	8000674 <_Unwind_VRS_Get>
 8000f70:	2300      	movs	r3, #0
 8000f72:	9500      	str	r5, [sp, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	220d      	movs	r2, #13
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f7ff fba1 	bl	80006c0 <_Unwind_VRS_Set>
 8000f7e:	e79a      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8000f80:	43c2      	mvns	r2, r0
 8000f82:	f002 0307 	and.w	r3, r2, #7
 8000f86:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f8a:	411a      	asrs	r2, r3
 8000f8c:	0701      	lsls	r1, r0, #28
 8000f8e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	bf48      	it	mi
 8000f98:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f7ff fd5c 	bl	8000a5c <_Unwind_VRS_Pop>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d1d2      	bne.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000fa8:	e785      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8000faa:	28b1      	cmp	r0, #177	; 0xb1
 8000fac:	d057      	beq.n	800105e <__gnu_unwind_execute+0x1b6>
 8000fae:	28b2      	cmp	r0, #178	; 0xb2
 8000fb0:	d068      	beq.n	8001084 <__gnu_unwind_execute+0x1dc>
 8000fb2:	28b3      	cmp	r0, #179	; 0xb3
 8000fb4:	f000 8095 	beq.w	80010e2 <__gnu_unwind_execute+0x23a>
 8000fb8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000fbc:	2bb4      	cmp	r3, #180	; 0xb4
 8000fbe:	d0c6      	beq.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000fc0:	f000 0207 	and.w	r2, r0, #7
 8000fc4:	3201      	adds	r2, #1
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff fd44 	bl	8000a5c <_Unwind_VRS_Pop>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d1ba      	bne.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000fd8:	e76d      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8000fda:	4638      	mov	r0, r7
 8000fdc:	f7ff ff38 	bl	8000e50 <next_unwind_byte>
 8000fe0:	0224      	lsls	r4, r4, #8
 8000fe2:	4304      	orrs	r4, r0
 8000fe4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000fe8:	d0b1      	beq.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000fea:	0124      	lsls	r4, r4, #4
 8000fec:	2300      	movs	r3, #0
 8000fee:	b2a2      	uxth	r2, r4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f7ff fd32 	bl	8000a5c <_Unwind_VRS_Pop>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d1a8      	bne.n	8000f4e <__gnu_unwind_execute+0xa6>
 8000ffc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001000:	bf18      	it	ne
 8001002:	f04f 0801 	movne.w	r8, #1
 8001006:	e756      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8001008:	28c6      	cmp	r0, #198	; 0xc6
 800100a:	d07d      	beq.n	8001108 <__gnu_unwind_execute+0x260>
 800100c:	28c7      	cmp	r0, #199	; 0xc7
 800100e:	f000 8086 	beq.w	800111e <__gnu_unwind_execute+0x276>
 8001012:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001016:	2bc0      	cmp	r3, #192	; 0xc0
 8001018:	f000 8094 	beq.w	8001144 <__gnu_unwind_execute+0x29c>
 800101c:	28c8      	cmp	r0, #200	; 0xc8
 800101e:	f000 809f 	beq.w	8001160 <__gnu_unwind_execute+0x2b8>
 8001022:	28c9      	cmp	r0, #201	; 0xc9
 8001024:	d193      	bne.n	8000f4e <__gnu_unwind_execute+0xa6>
 8001026:	4638      	mov	r0, r7
 8001028:	f7ff ff12 	bl	8000e50 <next_unwind_byte>
 800102c:	0302      	lsls	r2, r0, #12
 800102e:	f000 000f 	and.w	r0, r0, #15
 8001032:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001036:	3001      	adds	r0, #1
 8001038:	4302      	orrs	r2, r0
 800103a:	e781      	b.n	8000f40 <__gnu_unwind_execute+0x98>
 800103c:	ac03      	add	r4, sp, #12
 800103e:	4643      	mov	r3, r8
 8001040:	220e      	movs	r2, #14
 8001042:	4641      	mov	r1, r8
 8001044:	9400      	str	r4, [sp, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	f7ff fb14 	bl	8000674 <_Unwind_VRS_Get>
 800104c:	9400      	str	r4, [sp, #0]
 800104e:	4630      	mov	r0, r6
 8001050:	4643      	mov	r3, r8
 8001052:	220f      	movs	r2, #15
 8001054:	4641      	mov	r1, r8
 8001056:	f7ff fb33 	bl	80006c0 <_Unwind_VRS_Set>
 800105a:	4640      	mov	r0, r8
 800105c:	e778      	b.n	8000f50 <__gnu_unwind_execute+0xa8>
 800105e:	4638      	mov	r0, r7
 8001060:	f7ff fef6 	bl	8000e50 <next_unwind_byte>
 8001064:	2800      	cmp	r0, #0
 8001066:	f43f af72 	beq.w	8000f4e <__gnu_unwind_execute+0xa6>
 800106a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800106e:	f47f af6e 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 8001072:	4602      	mov	r2, r0
 8001074:	4619      	mov	r1, r3
 8001076:	4630      	mov	r0, r6
 8001078:	f7ff fcf0 	bl	8000a5c <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f47f af66 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 8001082:	e718      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8001084:	2300      	movs	r3, #0
 8001086:	f10d 090c 	add.w	r9, sp, #12
 800108a:	220d      	movs	r2, #13
 800108c:	4619      	mov	r1, r3
 800108e:	f8cd 9000 	str.w	r9, [sp]
 8001092:	4630      	mov	r0, r6
 8001094:	f7ff faee 	bl	8000674 <_Unwind_VRS_Get>
 8001098:	4638      	mov	r0, r7
 800109a:	f7ff fed9 	bl	8000e50 <next_unwind_byte>
 800109e:	0602      	lsls	r2, r0, #24
 80010a0:	f04f 0402 	mov.w	r4, #2
 80010a4:	d50c      	bpl.n	80010c0 <__gnu_unwind_execute+0x218>
 80010a6:	9b03      	ldr	r3, [sp, #12]
 80010a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010ac:	40a0      	lsls	r0, r4
 80010ae:	4403      	add	r3, r0
 80010b0:	4638      	mov	r0, r7
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	f7ff fecc 	bl	8000e50 <next_unwind_byte>
 80010b8:	0603      	lsls	r3, r0, #24
 80010ba:	f104 0407 	add.w	r4, r4, #7
 80010be:	d4f2      	bmi.n	80010a6 <__gnu_unwind_execute+0x1fe>
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	f8cd 9000 	str.w	r9, [sp]
 80010c6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010ca:	40a2      	lsls	r2, r4
 80010cc:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80010d0:	2300      	movs	r3, #0
 80010d2:	4414      	add	r4, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	220d      	movs	r2, #13
 80010d8:	4630      	mov	r0, r6
 80010da:	9403      	str	r4, [sp, #12]
 80010dc:	f7ff faf0 	bl	80006c0 <_Unwind_VRS_Set>
 80010e0:	e6e9      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 80010e2:	4638      	mov	r0, r7
 80010e4:	f7ff feb4 	bl	8000e50 <next_unwind_byte>
 80010e8:	0301      	lsls	r1, r0, #12
 80010ea:	f000 000f 	and.w	r0, r0, #15
 80010ee:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80010f2:	1c42      	adds	r2, r0, #1
 80010f4:	2301      	movs	r3, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	4630      	mov	r0, r6
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fcae 	bl	8000a5c <_Unwind_VRS_Pop>
 8001100:	2800      	cmp	r0, #0
 8001102:	f47f af24 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 8001106:	e6d6      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8001108:	4638      	mov	r0, r7
 800110a:	f7ff fea1 	bl	8000e50 <next_unwind_byte>
 800110e:	0301      	lsls	r1, r0, #12
 8001110:	f000 000f 	and.w	r0, r0, #15
 8001114:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001118:	1c42      	adds	r2, r0, #1
 800111a:	2303      	movs	r3, #3
 800111c:	e7eb      	b.n	80010f6 <__gnu_unwind_execute+0x24e>
 800111e:	4638      	mov	r0, r7
 8001120:	f7ff fe96 	bl	8000e50 <next_unwind_byte>
 8001124:	2800      	cmp	r0, #0
 8001126:	f43f af12 	beq.w	8000f4e <__gnu_unwind_execute+0xa6>
 800112a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800112e:	f47f af0e 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 8001132:	4602      	mov	r2, r0
 8001134:	2104      	movs	r1, #4
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fc90 	bl	8000a5c <_Unwind_VRS_Pop>
 800113c:	2800      	cmp	r0, #0
 800113e:	f47f af06 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 8001142:	e6b8      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8001144:	f000 020f 	and.w	r2, r0, #15
 8001148:	3201      	adds	r2, #1
 800114a:	2303      	movs	r3, #3
 800114c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001150:	4619      	mov	r1, r3
 8001152:	4630      	mov	r0, r6
 8001154:	f7ff fc82 	bl	8000a5c <_Unwind_VRS_Pop>
 8001158:	2800      	cmp	r0, #0
 800115a:	f47f aef8 	bne.w	8000f4e <__gnu_unwind_execute+0xa6>
 800115e:	e6aa      	b.n	8000eb6 <__gnu_unwind_execute+0xe>
 8001160:	4638      	mov	r0, r7
 8001162:	f7ff fe75 	bl	8000e50 <next_unwind_byte>
 8001166:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800116a:	f000 030f 	and.w	r3, r0, #15
 800116e:	3210      	adds	r2, #16
 8001170:	3301      	adds	r3, #1
 8001172:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001176:	e6e3      	b.n	8000f40 <__gnu_unwind_execute+0x98>

08001178 <__gnu_unwind_frame>:
 8001178:	b510      	push	{r4, lr}
 800117a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800117c:	b084      	sub	sp, #16
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	2003      	movs	r0, #3
 8001182:	f88d 000c 	strb.w	r0, [sp, #12]
 8001186:	79dc      	ldrb	r4, [r3, #7]
 8001188:	f88d 400d 	strb.w	r4, [sp, #13]
 800118c:	0212      	lsls	r2, r2, #8
 800118e:	3308      	adds	r3, #8
 8001190:	4608      	mov	r0, r1
 8001192:	a901      	add	r1, sp, #4
 8001194:	9201      	str	r2, [sp, #4]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	f7ff fe86 	bl	8000ea8 <__gnu_unwind_execute>
 800119c:	b004      	add	sp, #16
 800119e:	bd10      	pop	{r4, pc}

080011a0 <_Unwind_GetRegionStart>:
 80011a0:	b508      	push	{r3, lr}
 80011a2:	f7ff fe7f 	bl	8000ea4 <unwind_UCB_from_context>
 80011a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80011a8:	bd08      	pop	{r3, pc}
 80011aa:	bf00      	nop

080011ac <_Unwind_GetLanguageSpecificData>:
 80011ac:	b508      	push	{r3, lr}
 80011ae:	f7ff fe79 	bl	8000ea4 <unwind_UCB_from_context>
 80011b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80011b4:	79c3      	ldrb	r3, [r0, #7]
 80011b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80011ba:	3008      	adds	r0, #8
 80011bc:	bd08      	pop	{r3, pc}
 80011be:	bf00      	nop

080011c0 <_Unwind_GetTextRelBase>:
 80011c0:	b508      	push	{r3, lr}
 80011c2:	f001 fa65 	bl	8002690 <abort>
 80011c6:	bf00      	nop

080011c8 <_Unwind_GetDataRelBase>:
 80011c8:	b508      	push	{r3, lr}
 80011ca:	f7ff fff9 	bl	80011c0 <_Unwind_GetTextRelBase>
 80011ce:	bf00      	nop

080011d0 <_Z6apInitv>:
#include "ap.h"

void apInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	hwInit();
 80011d4:	f000 f95d 	bl	8001492 <hwInit>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <_Z6apMainv>:

void apMain(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	while(1)
 80011e0:	e7fe      	b.n	80011e0 <_Z6apMainv+0x4>
	...

080011e4 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80011ea:	f000 f959 	bl	80014a0 <HAL_Init>

  SystemClock_Config();
 80011ee:	f000 f81d 	bl	800122c <SystemClock_Config>


  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <bspInit+0x34>)
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <bspInit+0x34>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <bspInit+0x34>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <Error_Handler>:




void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09c      	sub	sp, #112	; 0x70
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	224c      	movs	r2, #76	; 0x4c
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fa20 	bl	8002680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2220      	movs	r2, #32
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fa1a 	bl	8002680 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 faaf 	bl	80017b0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4a30      	ldr	r2, [pc, #192]	; (8001318 <SystemClock_Config+0xec>)
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <SystemClock_Config+0xec>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <SystemClock_Config+0xec>)
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4a2b      	ldr	r2, [pc, #172]	; (800131c <SystemClock_Config+0xf0>)
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <SystemClock_Config+0xf0>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemClock_Config+0xf0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001284:	bf00      	nop
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemClock_Config+0xf0>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001292:	d1f8      	bne.n	8001286 <SystemClock_Config+0x5a>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012ba:	230c      	movs	r3, #12
 80012bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012be:	2300      	movs	r3, #0
 80012c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 faaa 	bl	8001824 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012d6:	f7ff ffa1 	bl	800121c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	233f      	movs	r3, #63	; 0x3f
 80012dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2303      	movs	r3, #3
 80012e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012e6:	2308      	movs	r3, #8
 80012e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012ee:	2340      	movs	r3, #64	; 0x40
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fe67 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800130c:	f7ff ff86 	bl	800121c <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3770      	adds	r7, #112	; 0x70
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58000400 	.word	0x58000400
 800131c:	58024800 	.word	0x58024800

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <SystemInit+0xac>)
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <SystemInit+0xac>)
 8001328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <SystemInit+0xb0>)
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <SystemInit+0xb0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <SystemInit+0xb0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001346:	4922      	ldr	r1, [pc, #136]	; (80013d0 <SystemInit+0xb0>)
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <SystemInit+0xb0>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <SystemInit+0xb4>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <SystemInit+0xb0>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <SystemInit+0xb0>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <SystemInit+0xb0>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <SystemInit+0xb0>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <SystemInit+0xb0>)
 800136c:	2200      	movs	r2, #0
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <SystemInit+0xb0>)
 8001372:	2200      	movs	r2, #0
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <SystemInit+0xb0>)
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <SystemInit+0xb0>)
 800137e:	2200      	movs	r2, #0
 8001380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <SystemInit+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <SystemInit+0xb0>)
 800138a:	2200      	movs	r2, #0
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <SystemInit+0xb0>)
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <SystemInit+0xb0>)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <SystemInit+0xb0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <SystemInit+0xb0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <SystemInit+0xb8>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <SystemInit+0xbc>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b2:	d202      	bcs.n	80013ba <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <SystemInit+0xc0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SystemInit+0xac>)
 80013bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	58024400 	.word	0x58024400
 80013d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d8:	5c001000 	.word	0x5c001000
 80013dc:	ffff0000 	.word	0xffff0000
 80013e0:	51008108 	.word	0x51008108

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ea:	e003      	b.n	80013f4 <LoopCopyDataInit>

080013ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013f2:	3104      	adds	r1, #4

080013f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013fc:	d3f6      	bcc.n	80013ec <CopyDataInit>
  ldr  r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001400:	e002      	b.n	8001408 <LoopFillZerobss>

08001402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001404:	f842 3b04 	str.w	r3, [r2], #4

08001408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800140a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800140c:	d3f9      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140e:	f7ff ff87 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f001 f911 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f001 f905 	bl	8002624 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001420:	08002880 	.word	0x08002880
  ldr  r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001428:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800142c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001430:	20000098 	.word	0x20000098

08001434 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC3_IRQHandler>

08001436 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <HardFault_Handler+0x4>

0800144a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <BusFault_Handler+0x4>

08001456 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f883 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}

08001492 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
	bspInit();
 8001496:	f7ff fea5 	bl	80011e4 <bspInit>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f000 f950 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ac:	f000 ff48 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_Init+0x6c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa21 f303 	lsr.w	r3, r1, r3
 80014c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_Init+0x68>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_Init+0x6c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_Init+0x70>)
 80014e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_Init+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f81c 	bl	8001528 <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e002      	b.n	8001500 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fa:	f000 f80d 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400
 800150c:	08002778 	.word	0x08002778
 8001510:	20000004 	.word	0x20000004
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_InitTick+0x60>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e021      	b.n	8001580 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_InitTick+0x64>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_InitTick+0x60>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f91f 	bl	8001796 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f8f7 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x68>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000090 	.word	0x20000090

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000090 	.word	0x20000090

080015d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetREVID+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0c1b      	lsrs	r3, r3, #16
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	5c001000 	.word	0x5c001000

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <__NVIC_SetPriorityGrouping+0x40>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	4313      	orrs	r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x40>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	05fa0000 	.word	0x05fa0000

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	490d      	ldr	r1, [pc, #52]	; (800169c <__NVIC_SetPriority+0x4c>)
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	4909      	ldr	r1, [pc, #36]	; (80016a0 <__NVIC_SetPriority+0x50>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	2201      	movs	r2, #1
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	401a      	ands	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ea:	2101      	movs	r1, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	1e59      	subs	r1, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff90 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff49 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff60 	bl	8001634 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff92 	bl	80016a4 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff61 	bl	8001650 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb2 	bl	8001708 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_PWREx_ConfigSupply+0x70>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d00a      	beq.n	80017da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_PWREx_ConfigSupply+0x70>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0207 	and.w	r2, r3, #7
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e01f      	b.n	8001816 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e01d      	b.n	8001816 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017da:	4911      	ldr	r1, [pc, #68]	; (8001820 <HAL_PWREx_ConfigSupply+0x70>)
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_PWREx_ConfigSupply+0x70>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f023 0207 	bic.w	r2, r3, #7
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017ea:	f7ff fee7 	bl	80015bc <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017f0:	e009      	b.n	8001806 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017f2:	f7ff fee3 	bl	80015bc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001800:	d901      	bls.n	8001806 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e007      	b.n	8001816 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_PWREx_ConfigSupply+0x70>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001812:	d1ee      	bne.n	80017f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	58024800 	.word	0x58024800

08001824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e3c4      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001844:	4ba2      	ldr	r3, [pc, #648]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800184e:	4ba0      	ldr	r3, [pc, #640]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	2b10      	cmp	r3, #16
 8001858:	d007      	beq.n	800186a <HAL_RCC_OscConfig+0x46>
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b18      	cmp	r3, #24
 800185e:	d110      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d10b      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06c      	beq.n	8001950 <HAL_RCC_OscConfig+0x12c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d168      	bne.n	8001950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e39e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x76>
 800188c:	4a90      	ldr	r2, [pc, #576]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	4b90      	ldr	r3, [pc, #576]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x98>
 80018a2:	4a8b      	ldr	r2, [pc, #556]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	4b8a      	ldr	r3, [pc, #552]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4a88      	ldr	r2, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	4b87      	ldr	r3, [pc, #540]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xbc>
 80018c6:	4a82      	ldr	r2, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4a7f      	ldr	r2, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018e0:	4a7b      	ldr	r2, [pc, #492]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4a78      	ldr	r2, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fe5c 	bl	80015bc <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fe58 	bl	80015bc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e352      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800191a:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xe4>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fe48 	bl	80015bc <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fe44 	bl	80015bc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e33e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x10c>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8092 	beq.w	8001a84 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001968:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800196a:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_RCC_OscConfig+0x162>
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	2b18      	cmp	r3, #24
 800197a:	d12d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d128      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001986:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x17a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e310      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	f7ff fe19 	bl	80015d4 <HAL_GetREVID>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d80a      	bhi.n	80019c2 <HAL_RCC_OscConfig+0x19e>
 80019ac:	4948      	ldr	r1, [pc, #288]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	031b      	lsls	r3, r3, #12
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	e060      	b.n	8001a84 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4943      	ldr	r1, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d6:	e055      	b.n	8001a84 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d038      	beq.n	8001a52 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019e0:	493b      	ldr	r1, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0219 	bic.w	r2, r3, #25
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fde3 	bl	80015bc <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fddf 	bl	80015bc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e2d9      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	f7ff fddc 	bl	80015d4 <HAL_GetREVID>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d80a      	bhi.n	8001a3c <HAL_RCC_OscConfig+0x218>
 8001a26:	492a      	ldr	r1, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	031b      	lsls	r3, r3, #12
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	e023      	b.n	8001a84 <HAL_RCC_OscConfig+0x260>
 8001a3c:	4924      	ldr	r1, [pc, #144]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fdad 	bl	80015bc <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fda9 	bl	80015bc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e2a3      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8091 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d007      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x294>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b18      	cmp	r3, #24
 8001aac:	d12f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2ea>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d12a      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2b0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d003      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e277      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
 8001ad0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad4:	f7ff fd7e 	bl	80015d4 <HAL_GetREVID>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d80a      	bhi.n	8001af8 <HAL_RCC_OscConfig+0x2d4>
 8001ae2:	49a2      	ldr	r1, [pc, #648]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001ae4:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	069b      	lsls	r3, r3, #26
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af6:	e05d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af8:	499c      	ldr	r1, [pc, #624]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001afa:	4b9c      	ldr	r3, [pc, #624]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0c:	e052      	b.n	8001bb4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d035      	beq.n	8001b82 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b16:	4a95      	ldr	r2, [pc, #596]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b18:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fd4b 	bl	80015bc <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fd47 	bl	80015bc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e241      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3c:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b48:	f7ff fd44 	bl	80015d4 <HAL_GetREVID>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d80a      	bhi.n	8001b6c <HAL_RCC_OscConfig+0x348>
 8001b56:	4985      	ldr	r1, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b58:	4b84      	ldr	r3, [pc, #528]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	069b      	lsls	r3, r3, #26
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
 8001b6a:	e023      	b.n	8001bb4 <HAL_RCC_OscConfig+0x390>
 8001b6c:	497f      	ldr	r1, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	061b      	lsls	r3, r3, #24
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e018      	b.n	8001bb4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fd15 	bl	80015bc <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b96:	f7ff fd11 	bl	80015bc <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e20b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ba8:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d036      	beq.n	8001c2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d019      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4a68      	ldr	r2, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001bca:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fcf2 	bl	80015bc <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fcee 	bl	80015bc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1e8      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x3b8>
 8001bfa:	e018      	b.n	8001c2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fcd8 	bl	80015bc <HAL_GetTick>
 8001c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fcd4 	bl	80015bc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1ce      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c22:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d036      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c42:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c44:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fcb5 	bl	80015bc <HAL_GetTick>
 8001c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c56:	f7ff fcb1 	bl	80015bc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1ab      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x432>
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fc9b 	bl	80015bc <HAL_GetTick>
 8001c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c8a:	f7ff fc97 	bl	80015bc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e191      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8086 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_RCC_OscConfig+0x54c>)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x54c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc2:	f7ff fc7b 	bl	80015bc <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7ff fc77 	bl	80015bc <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e171      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_OscConfig+0x54c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4da>
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	e02d      	b.n	8001d5a <HAL_RCC_OscConfig+0x536>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4fc>
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	e01c      	b.n	8001d5a <HAL_RCC_OscConfig+0x536>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x51e>
 8001d28:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0x536>
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x548>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01a      	beq.n	8001d98 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fc2b 	bl	80015bc <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d68:	e00f      	b.n	8001d8a <HAL_RCC_OscConfig+0x566>
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc22 	bl	80015bc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e11a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8a:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ee      	beq.n	8001d74 <HAL_RCC_OscConfig+0x550>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fc10 	bl	80015bc <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff fc0c 	bl	80015bc <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e104      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db6:	4b84      	ldr	r3, [pc, #528]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ee      	bne.n	8001da0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80f9 	beq.w	8001fbe <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dd4:	2b18      	cmp	r3, #24
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	f040 8095 	bne.w	8001f0e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4a78      	ldr	r2, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001de6:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fbe4 	bl	80015bc <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fbe0 	bl	80015bc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0da      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0a:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	486c      	ldr	r0, [pc, #432]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e18:	4b6b      	ldr	r3, [pc, #428]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1c:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_RCC_OscConfig+0x7a8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	6283      	str	r3, [r0, #40]	; 0x28
 8001e30:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	3b01      	subs	r3, #1
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e62:	4313      	orrs	r3, r2
 8001e64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e72:	4955      	ldr	r1, [pc, #340]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e78:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <HAL_RCC_OscConfig+0x7ac>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e80:	00d2      	lsls	r2, r2, #3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e86:	4950      	ldr	r1, [pc, #320]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e88:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f023 020c 	bic.w	r2, r3, #12
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	4313      	orrs	r3, r2
 8001e96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e98:	494b      	ldr	r1, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f023 0202 	bic.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eb6:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec2:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ece:	4a3e      	ldr	r2, [pc, #248]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eda:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb69 	bl	80015bc <HAL_GetTick>
 8001eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff fb65 	bl	80015bc <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e05f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x6ca>
 8001f0c:	e057      	b.n	8001fbe <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fb4f 	bl	80015bc <HAL_GetTick>
 8001f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fb4b 	bl	80015bc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e045      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x6fe>
 8001f40:	e03d      	b.n	8001fbe <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_OscConfig+0x7a4>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d031      	beq.n	8001fba <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d12a      	bne.n	8001fba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d122      	bne.n	8001fba <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d11a      	bne.n	8001fba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d111      	bne.n	8001fba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d108      	bne.n	8001fba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	0e1b      	lsrs	r3, r3, #24
 8001fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	fffffc0c 	.word	0xfffffc0c
 8001fd0:	ffff0007 	.word	0xffff0007

08001fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e19c      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b8a      	ldr	r3, [pc, #552]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d210      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4987      	ldr	r1, [pc, #540]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 8001ff8:	4b86      	ldr	r3, [pc, #536]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 020f 	bic.w	r2, r3, #15
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b83      	ldr	r3, [pc, #524]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e184      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002034:	4978      	ldr	r1, [pc, #480]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002036:	4b78      	ldr	r3, [pc, #480]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	4b70      	ldr	r3, [pc, #448]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d908      	bls.n	8002074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002062:	496d      	ldr	r1, [pc, #436]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800208c:	429a      	cmp	r2, r3
 800208e:	d908      	bls.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002090:	4961      	ldr	r1, [pc, #388]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002092:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020be:	4956      	ldr	r1, [pc, #344]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d908      	bls.n	80020fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	494a      	ldr	r1, [pc, #296]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d055      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800210a:	4943      	ldr	r1, [pc, #268]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4313      	orrs	r3, r2
 800211a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002124:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d121      	bne.n	8002174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0f6      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d107      	bne.n	800214c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d115      	bne.n	8002174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0ea      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0de      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0d6      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002174:	4928      	ldr	r1, [pc, #160]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff fa19 	bl	80015bc <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218e:	f7ff fa15 	bl	80015bc <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0be      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d1eb      	bne.n	800218e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d010      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d208      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d2:	4911      	ldr	r1, [pc, #68]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 020f 	bic.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d914      	bls.n	800221c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 020f 	bic.w	r2, r3, #15
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_ClockConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e086      	b.n	8002322 <HAL_RCC_ClockConfig+0x34e>
 8002214:	52002000 	.word	0x52002000
 8002218:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	4b3f      	ldr	r3, [pc, #252]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002234:	429a      	cmp	r2, r3
 8002236:	d208      	bcs.n	800224a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002238:	493c      	ldr	r1, [pc, #240]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002262:	429a      	cmp	r2, r3
 8002264:	d208      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002266:	4931      	ldr	r1, [pc, #196]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 8002268:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002290:	429a      	cmp	r2, r3
 8002292:	d208      	bcs.n	80022a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002294:	4925      	ldr	r1, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d010      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022be:	429a      	cmp	r2, r3
 80022c0:	d208      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022c2:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d4:	f000 f834 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022d8:	4601      	mov	r1, r0
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa21 f303 	lsr.w	r3, r1, r3
 80022f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCC_ClockConfig+0x358>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x360>)
 800230a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x364>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x368>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f906 	bl	8001528 <HAL_InitTick>
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	58024400 	.word	0x58024400
 8002330:	08002778 	.word	0x08002778
 8002334:	20000004 	.word	0x20000004
 8002338:	20000000 	.word	0x20000000
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002346:	4baf      	ldr	r3, [pc, #700]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234e:	2b18      	cmp	r3, #24
 8002350:	f200 814e 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	080023c1 	.word	0x080023c1
 8002360:	080025f1 	.word	0x080025f1
 8002364:	080025f1 	.word	0x080025f1
 8002368:	080025f1 	.word	0x080025f1
 800236c:	080025f1 	.word	0x080025f1
 8002370:	080025f1 	.word	0x080025f1
 8002374:	080025f1 	.word	0x080025f1
 8002378:	080025f1 	.word	0x080025f1
 800237c:	080023e7 	.word	0x080023e7
 8002380:	080025f1 	.word	0x080025f1
 8002384:	080025f1 	.word	0x080025f1
 8002388:	080025f1 	.word	0x080025f1
 800238c:	080025f1 	.word	0x080025f1
 8002390:	080025f1 	.word	0x080025f1
 8002394:	080025f1 	.word	0x080025f1
 8002398:	080025f1 	.word	0x080025f1
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	080025f1 	.word	0x080025f1
 80023a4:	080025f1 	.word	0x080025f1
 80023a8:	080025f1 	.word	0x080025f1
 80023ac:	080025f1 	.word	0x080025f1
 80023b0:	080025f1 	.word	0x080025f1
 80023b4:	080025f1 	.word	0x080025f1
 80023b8:	080025f1 	.word	0x080025f1
 80023bc:	080023f3 	.word	0x080023f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023c0:	4b90      	ldr	r3, [pc, #576]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023cc:	4b8d      	ldr	r3, [pc, #564]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	4a8c      	ldr	r2, [pc, #560]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
 80023dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023de:	e10a      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023e0:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023e2:	61bb      	str	r3, [r7, #24]
    break;
 80023e4:	e107      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023e6:	4b89      	ldr	r3, [pc, #548]	; (800260c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023e8:	61bb      	str	r3, [r7, #24]
    break;
 80023ea:	e104      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80023ee:	61bb      	str	r3, [r7, #24]
    break;
 80023f0:	e101      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023f2:	4b84      	ldr	r3, [pc, #528]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023fc:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002406:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002412:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80da 	beq.w	80025ea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d05a      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d302      	bcc.n	8002446 <HAL_RCC_GetSysClockFreq+0x106>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d078      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002444:	e099      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002446:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02d      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800248c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002490:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800249c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024ac:	e087      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2d8>
 80024bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024f0:	e065      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800261c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002514:	ed97 6a02 	vldr	s12, [r7, #8]
 8002518:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2d4>
 800251c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002534:	e043      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002558:	ed97 6a02 	vldr	s12, [r7, #8]
 800255c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002578:	e021      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002584:	eddf 6a25 	vldr	s13, [pc, #148]	; 800261c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259c:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2d4>
 80025a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025bc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	0a5b      	lsrs	r3, r3, #9
 80025c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c8:	3301      	adds	r3, #1
 80025ca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80025da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e2:	ee17 3a90 	vmov	r3, s15
 80025e6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025e8:	e005      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
    break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80025f2:	61bb      	str	r3, [r7, #24]
    break;
 80025f4:	bf00      	nop
  }

  return sysclockfreq;
 80025f6:	69bb      	ldr	r3, [r7, #24]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	58024400 	.word	0x58024400
 8002608:	03d09000 	.word	0x03d09000
 800260c:	003d0900 	.word	0x003d0900
 8002610:	007a1200 	.word	0x007a1200
 8002614:	46000000 	.word	0x46000000
 8002618:	4c742400 	.word	0x4c742400
 800261c:	4a742400 	.word	0x4a742400
 8002620:	4af42400 	.word	0x4af42400

08002624 <main>:
 */

#include "main.h"

int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	apInit();
 8002628:	f7fe fdd2 	bl	80011d0 <_Z6apInitv>

	apMain();
 800262c:	f7fe fdd6 	bl	80011dc <_Z6apMainv>
}
 8002630:	2300      	movs	r3, #0
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4e0d      	ldr	r6, [pc, #52]	; (8002670 <__libc_init_array+0x38>)
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 800263e:	1ba4      	subs	r4, r4, r6
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2500      	movs	r5, #0
 8002644:	42a5      	cmp	r5, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	4e0b      	ldr	r6, [pc, #44]	; (8002678 <__libc_init_array+0x40>)
 800264a:	4c0c      	ldr	r4, [pc, #48]	; (800267c <__libc_init_array+0x44>)
 800264c:	f000 f888 	bl	8002760 <_init>
 8002650:	1ba4      	subs	r4, r4, r6
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	2500      	movs	r5, #0
 8002656:	42a5      	cmp	r5, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002660:	4798      	blx	r3
 8002662:	3501      	adds	r5, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266a:	4798      	blx	r3
 800266c:	3501      	adds	r5, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	08002878 	.word	0x08002878
 8002674:	08002878 	.word	0x08002878
 8002678:	08002878 	.word	0x08002878
 800267c:	0800287c 	.word	0x0800287c

08002680 <memset>:
 8002680:	4402      	add	r2, r0
 8002682:	4603      	mov	r3, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <abort>:
 8002690:	b508      	push	{r3, lr}
 8002692:	2006      	movs	r0, #6
 8002694:	f000 f836 	bl	8002704 <raise>
 8002698:	2001      	movs	r0, #1
 800269a:	f000 f85f 	bl	800275c <_exit>

0800269e <memcpy>:
 800269e:	b510      	push	{r4, lr}
 80026a0:	1e43      	subs	r3, r0, #1
 80026a2:	440a      	add	r2, r1
 80026a4:	4291      	cmp	r1, r2
 80026a6:	d100      	bne.n	80026aa <memcpy+0xc>
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026b2:	e7f7      	b.n	80026a4 <memcpy+0x6>

080026b4 <_raise_r>:
 80026b4:	291f      	cmp	r1, #31
 80026b6:	b538      	push	{r3, r4, r5, lr}
 80026b8:	4604      	mov	r4, r0
 80026ba:	460d      	mov	r5, r1
 80026bc:	d904      	bls.n	80026c8 <_raise_r+0x14>
 80026be:	2316      	movs	r3, #22
 80026c0:	6003      	str	r3, [r0, #0]
 80026c2:	f04f 30ff 	mov.w	r0, #4294967295
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80026ca:	b112      	cbz	r2, 80026d2 <_raise_r+0x1e>
 80026cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80026d0:	b94b      	cbnz	r3, 80026e6 <_raise_r+0x32>
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f830 	bl	8002738 <_getpid_r>
 80026d8:	462a      	mov	r2, r5
 80026da:	4601      	mov	r1, r0
 80026dc:	4620      	mov	r0, r4
 80026de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026e2:	f000 b817 	b.w	8002714 <_kill_r>
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d00a      	beq.n	8002700 <_raise_r+0x4c>
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	d103      	bne.n	80026f6 <_raise_r+0x42>
 80026ee:	2316      	movs	r3, #22
 80026f0:	6003      	str	r3, [r0, #0]
 80026f2:	2001      	movs	r0, #1
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
 80026f6:	2400      	movs	r4, #0
 80026f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80026fc:	4628      	mov	r0, r5
 80026fe:	4798      	blx	r3
 8002700:	2000      	movs	r0, #0
 8002702:	bd38      	pop	{r3, r4, r5, pc}

08002704 <raise>:
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <raise+0xc>)
 8002706:	4601      	mov	r1, r0
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f7ff bfd3 	b.w	80026b4 <_raise_r>
 800270e:	bf00      	nop
 8002710:	20000010 	.word	0x20000010

08002714 <_kill_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4c07      	ldr	r4, [pc, #28]	; (8002734 <_kill_r+0x20>)
 8002718:	2300      	movs	r3, #0
 800271a:	4605      	mov	r5, r0
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	f000 f813 	bl	800274c <_kill>
 8002726:	1c43      	adds	r3, r0, #1
 8002728:	d102      	bne.n	8002730 <_kill_r+0x1c>
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	b103      	cbz	r3, 8002730 <_kill_r+0x1c>
 800272e:	602b      	str	r3, [r5, #0]
 8002730:	bd38      	pop	{r3, r4, r5, pc}
 8002732:	bf00      	nop
 8002734:	20000094 	.word	0x20000094

08002738 <_getpid_r>:
 8002738:	f000 b800 	b.w	800273c <_getpid>

0800273c <_getpid>:
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <_getpid+0xc>)
 800273e:	2258      	movs	r2, #88	; 0x58
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f04f 30ff 	mov.w	r0, #4294967295
 8002746:	4770      	bx	lr
 8002748:	20000094 	.word	0x20000094

0800274c <_kill>:
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <_kill+0xc>)
 800274e:	2258      	movs	r2, #88	; 0x58
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f04f 30ff 	mov.w	r0, #4294967295
 8002756:	4770      	bx	lr
 8002758:	20000094 	.word	0x20000094

0800275c <_exit>:
 800275c:	e7fe      	b.n	800275c <_exit>
	...

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
